query,function,identifier,url,score
convert int to string,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1051944
convert int to string,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0931046
convert int to string,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0913168
convert int to string,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0803035
convert int to string,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0730444
convert int to string,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0666428
convert int to string,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0606987
convert int to string,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0541624
convert int to string,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0530673
convert int to string,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0496465
priority queue,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0918158
priority queue,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0874652
priority queue,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0725292
priority queue,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0608459
priority queue,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0566292
priority queue,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0493412
priority queue,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0452197
priority queue,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0345708
priority queue,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0319219
priority queue,"def print_npa(self, record):
        print('IP Number: %s' % record.ip_n)
        print('Writer Name: %s' % record.ip_writer_name)
        print('Name: %s' % record.ip_name)
        print('Language: %s' % record.language_code)",CWRPrinter.print_npa,https://github.com/weso/CWR-DataApi/blob/f3b6ba8308c901b6ab87073c155c08e30692333c/cwr/utils/printer.py#L201-L205,1.0295985
string to date,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0682902
string to date,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0580744
string to date,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0564724
string to date,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0406456
string to date,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0382975
string to date,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0324169
string to date,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0246549
string to date,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0193969
string to date,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0164845
string to date,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0150518
sort string list,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.114128
sort string list,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.113525
sort string list,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0933678
sort string list,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0892174
sort string list,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0782325
sort string list,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0763099
sort string list,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0642926
sort string list,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0556896
sort string list,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0553445
sort string list,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.053024
save list to file,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0067726
save list to file,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0067389
save list to file,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0057596
save list to file,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0030873
save list to file,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0021892
save list to file,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0015343
save list to file,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.001451
save list to file,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.0010009
save list to file,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.0009044
save list to file,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0006576
postgresql connection,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0014406
postgresql connection,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9956167
postgresql connection,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.99469036
postgresql connection,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9924857
postgresql connection,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9912217
postgresql connection,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.99078256
postgresql connection,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.98902494
postgresql connection,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.9887186
postgresql connection,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.9867544
postgresql connection,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,0.98668253
confusion matrix,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.98749244
confusion matrix,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9840257
confusion matrix,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9815461
confusion matrix,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.97947866
confusion matrix,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.9765059
confusion matrix,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.97603667
confusion matrix,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9758738
confusion matrix,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.9753885
confusion matrix,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.97463775
confusion matrix,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.97363293
set working directory,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0653127
set working directory,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0627044
set working directory,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0477077
set working directory,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0453032
set working directory,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0399127
set working directory,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.039339
set working directory,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0381848
set working directory,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0363135
set working directory,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0361179
set working directory,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0358737
group by count,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0643729
group by count,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0601027
group by count,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0507331
group by count,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.047826
group by count,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0404395
group by count,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0398779
group by count,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0317624
group by count,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.0317231
group by count,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0311738
group by count,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.0307451
binomial distribution,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9768315
binomial distribution,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.976619
binomial distribution,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9745512
binomial distribution,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.97440386
binomial distribution,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.9742632
binomial distribution,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.9709174
binomial distribution,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,0.97067374
binomial distribution,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,0.9706552
binomial distribution,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.9706431
binomial distribution,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,0.96994233
aes encryption,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9762211
aes encryption,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9757011
aes encryption,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.974264
aes encryption,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.9741979
aes encryption,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.97416806
aes encryption,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.9707269
aes encryption,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,0.9705504
aes encryption,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.9704428
aes encryption,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,0.9703956
aes encryption,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,0.9698672
linear regression,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.98045975
linear regression,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9796946
linear regression,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9786676
linear regression,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9754427
linear regression,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.97510266
linear regression,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9749693
linear regression,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.974493
linear regression,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.97353095
linear regression,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.9722615
linear regression,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.97182107
socket recv timeout,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0310096
socket recv timeout,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0239644
socket recv timeout,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0189832
socket recv timeout,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0188566
socket recv timeout,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0162838
socket recv timeout,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0158415
socket recv timeout,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0155663
socket recv timeout,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0151336
socket recv timeout,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0150489
socket recv timeout,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0145025
write csv,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0530591
write csv,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0437611
write csv,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0363164
write csv,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0276748
write csv,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0245389
write csv,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0230349
write csv,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0138638
write csv,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0108675
write csv,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0065833
write csv,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0052537
convert decimal to hex,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0088159
convert decimal to hex,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0065657
convert decimal to hex,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0055994
convert decimal to hex,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0047232
convert decimal to hex,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0047139
convert decimal to hex,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0046117
convert decimal to hex,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0039113
convert decimal to hex,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0038111
convert decimal to hex,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0027087
convert decimal to hex,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.002643
export to excel,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.002678
export to excel,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.99876547
export to excel,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9972521
export to excel,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.99429375
export to excel,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9937148
export to excel,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.99321026
export to excel,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9923786
export to excel,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.98978764
export to excel,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,0.9889744
export to excel,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.98890895
scatter plot,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.9935462
scatter plot,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9926439
scatter plot,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.98328435
scatter plot,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9809281
scatter plot,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9805732
scatter plot,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.98019725
scatter plot,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,0.976404
scatter plot,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9763943
scatter plot,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.9758055
scatter plot,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.97516197
convert json to csv,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0563102
convert json to csv,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0467992
convert json to csv,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0439426
convert json to csv,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0340059
convert json to csv,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0333318
convert json to csv,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0332414
convert json to csv,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0320556
convert json to csv,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0316972
convert json to csv,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0312628
convert json to csv,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0303091
pretty print json,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.073106
pretty print json,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0658726
pretty print json,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0559273
pretty print json,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0510538
pretty print json,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.050485
pretty print json,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0497687
pretty print json,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.049215
pretty print json,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.048386
pretty print json,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0476724
pretty print json,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0474942
replace in file,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0150851
replace in file,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0062987
replace in file,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0056144
replace in file,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,1.0052372
replace in file,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0044749
replace in file,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0042439
replace in file,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0042053
replace in file,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.0041938
replace in file,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0041173
replace in file,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0035057
k means clustering,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.073075
k means clustering,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0717255
k means clustering,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0543168
k means clustering,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0502856
k means clustering,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0450736
k means clustering,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0428739
k means clustering,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0420249
k means clustering,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0378027
k means clustering,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0355695
k means clustering,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0338565
connect to sql,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0365523
connect to sql,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0363148
connect to sql,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0213449
connect to sql,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0140963
connect to sql,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0127132
connect to sql,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0123224
connect to sql,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0110953
connect to sql,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0088861
connect to sql,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0027266
connect to sql,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,1.0024891
html encode string,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1328468
html encode string,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1276159
html encode string,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1027637
html encode string,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.1024303
html encode string,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0906944
html encode string,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0883865
html encode string,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0704291
html encode string,"def print_npa(self, record):
        print('IP Number: %s' % record.ip_n)
        print('Writer Name: %s' % record.ip_writer_name)
        print('Name: %s' % record.ip_name)
        print('Language: %s' % record.language_code)",CWRPrinter.print_npa,https://github.com/weso/CWR-DataApi/blob/f3b6ba8308c901b6ab87073c155c08e30692333c/cwr/utils/printer.py#L201-L205,1.0694869
html encode string,"def callback(cfunc):
    """"""
    Turn a ctypes CFUNCTYPE instance into a value which can be passed into PyROOT
    """"""
    # Note:
    # ROOT wants a c_voidp whose addressof() == the call site of the target
    # function. This hackery is necessary to achieve that.
    return C.c_voidp.from_address(C.cast(cfunc, C.c_voidp).value)",callback,https://github.com/rootpy/rootpy/blob/3926935e1f2100d8ba68070c2ab44055d4800f73/rootpy/utils/cinterface.py#L21-L28,1.06488
html encode string,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0647374
finding time elapsed using a timer,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0945117
finding time elapsed using a timer,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0941795
finding time elapsed using a timer,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0910542
finding time elapsed using a timer,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0907285
finding time elapsed using a timer,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.090625
finding time elapsed using a timer,"def quoted_split(string, sep, quotes='""'):
    """"""
    Split a string on the given separation character, but respecting
    double-quoted sections of the string.  Returns an iterator.

    :param string: The string to split.
    :param sep: The character separating sections of the string.
    :param quotes: A string specifying all legal quote characters.

    :returns: An iterator which will iterate over each element of the
              string separated by the designated separator.
    """"""

    # Initialize the algorithm
    start = None
    escape = False
    quote = False

    # Walk through the string
    for i, c in enumerate(string):
        # Save the start index
        if start is None:
            start = i

        # Handle escape sequences
        if escape:
            escape = False

        # Handle quoted strings
        elif quote:
            if c == '\\':
                escape = True
            elif c == quote:
                quote = False

        # Handle the separator
        elif c == sep:
            yield string[start:i]
            start = None

        # Handle quotes
        elif c in quotes:
            quote = c

    # Yield the last part
    if start is not None:
        yield string[start:]",quoted_split,https://github.com/klmitch/aversion/blob/90ca68e7d6426a77db8a926171f8d3bbeb00ee4c/aversion.py#L29-L75,1.0880057
finding time elapsed using a timer,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0868573
finding time elapsed using a timer,"def deep_update(config, override_config):
    for k, v in six.iteritems(override_config):
        if isinstance(v, Mapping):
            k_config = config.get(k, {})
            if isinstance(k_config, Mapping):
                v_config = deep_update(k_config, v)
                config[k] = v_config
            else:
                config[k] = v
        else:
            config[k] = override_config[k]
    return config",deep_update,https://github.com/polyaxon/rhea/blob/f47b59777cd996d834a0497a1ab442541aaa8a62/rhea/utils.py#L9-L20,1.0859572
finding time elapsed using a timer,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0859165
finding time elapsed using a timer,"def top_1(arr):
    values = {}
    #reserve each value which first appears on keys
    #reserve how many time each value appears by index number on values
    result = []
    f_val = 0

    for i in arr:
        if i in values:
            values[i] += 1
        else:
            values[i] = 1

    f_val = max(values.values())
        
    for i in values.keys():
        if values[i] == f_val:
            result.append(i)
        else:
            continue
    
    return result",top_1,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/arrays/top_1.py#L15-L36,1.085902
parse binary file to custom class,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0867488
parse binary file to custom class,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0862108
parse binary file to custom class,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0791703
parse binary file to custom class,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0750554
parse binary file to custom class,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0740106
parse binary file to custom class,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0737929
parse binary file to custom class,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0736475
parse binary file to custom class,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0735263
parse binary file to custom class,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0733331
parse binary file to custom class,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.0721077
get current ip address,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0567135
get current ip address,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0508933
get current ip address,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0403717
get current ip address,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0338633
get current ip address,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0315646
get current ip address,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0307974
get current ip address,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.019655
get current ip address,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0195477
get current ip address,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0189232
get current ip address,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.017697
convert int to bool,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0345031
convert int to bool,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0344459
convert int to bool,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0337607
convert int to bool,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0327485
convert int to bool,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0321128
convert int to bool,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.030871
convert int to bool,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0293212
convert int to bool,"def decode_string(s):
    """"""
    :type s: str
    :rtype: str
    """"""
    stack = []; cur_num = 0; cur_string = ''
    for c in s:
        if c == '[':
            stack.append((cur_string, cur_num))
            cur_string = ''
            cur_num = 0
        elif c == ']':
            prev_string, num = stack.pop()
            cur_string = prev_string + num * cur_string
        elif c.isdigit():
            cur_num = cur_num*10 + int(c)
        else:
            cur_string += c
    return cur_string",decode_string,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/strings/decode_string.py#L20-L38,1.0284522
convert int to bool,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0284052
convert int to bool,"def _convert(self, val):
        obj = {}
        for pair in list_regex.findall(val):
            pair = self.kv_regex.split(pair)
            if len(pair) == 1:
                k, v = pair[0], ''
            else:
                k, v = pair
            assert k in self.validators
            val = self.validators[k](v)
            if k in obj:
                log.warn('key: {!r} overwritten '
                         'new: {!r} old: {!r}'.format(k, val, obj[k]))
            obj[k] = val
        return obj",Dict._convert,https://github.com/jthacker/terseparse/blob/236a31faf819f3ae9019a545613b8e7a6808f7b2/terseparse/types.py#L212-L226,1.0278809
read text file line by line,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1212237
read text file line by line,"def get_param_names(model_obj):
    """"""
    Extracts all the names to be displayed for the estimated parameters.

    Parameters
    ----------
    model_obj : an instance of an MNDC object.
        Should have the following attributes:
        `['ind_var_names', 'intercept_names', 'shape_names', 'nest_names']`.

    Returns
    -------
    all_names : list of strings.
        There will be one element for each estimated parameter. The order of
        the parameter names will be
        `['nest_parameters', 'shape_parameters', 'outside_intercepts',
          'index_coefficients']`.
    """"""
    # Get the index coefficient names
    all_names = deepcopy(model_obj.ind_var_names)
    # Add the intercept names if any exist
    if model_obj.intercept_names is not None:
        all_names = model_obj.intercept_names + all_names
    # Add the shape names if any exist
    if model_obj.shape_names is not None:
        all_names = model_obj.shape_names + all_names
    # Add the nest names if any exist
    if model_obj.nest_names is not None:
        all_names = model_obj.nest_names + all_names
    return all_names",get_param_names,https://github.com/timothyb0912/pylogit/blob/f83b0fd6debaa7358d87c3828428f6d4ead71357/pylogit/bootstrap.py#L46-L75,1.1024568
read text file line by line,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,1.1020612
read text file line by line,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.1015193
read text file line by line,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.1010389
read text file line by line,"def serialize(self):
        data = {}
        if self.name:
            data['name'] = self.name
        if self.host_port:
            data['hostPort'] = self.host_port
        if self.container_port:
            data['containerPort'] = self.container_port
        if self.protocol:
            data['protocol'] = self.protocol
        if self.host_ip:
            data['hostIP'] = self.host_ip
        return data",ContainerPort.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/ContainerPort.py#L114-L126,1.1000901
read text file line by line,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0996583
read text file line by line,"def __init__(self, text: str, url: str = None, callback_data: str = None,
                 switch_inline_query: str = None,
                 switch_inline_query_current_chat: str = None,
                 callback_game: 'CallbackGame' = None) -> None:
        data = {
            'text': text,
        }
        if url is not None:
            data['url'] = url
        if callback_data is not None:
            data['callback_data'] = callback_data
        if switch_inline_query is not None:
            data['switch_inline_query'] = switch_inline_query
        if switch_inline_query_current_chat is not None:
            data['switch_inline_query_current_chat'] = switch_inline_query_current_chat
        if callback_game is not None:
            data['callback_game'] = callback_game
        self._data = data",InlineKeyboardButton.__init__,https://github.com/legnaleurc/wcpan.telegram/blob/61a172203ff69b6490e52a64bf55d47aeef1e148/wcpan/telegram/types.py#L697-L714,1.0986528
read text file line by line,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0983201
read text file line by line,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.097404
get executable path,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0622439
get executable path,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0505314
get executable path,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0455229
get executable path,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.03298
get executable path,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.031463
get executable path,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0291573
get executable path,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0183789
get executable path,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.014691
get executable path,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0142055
get executable path,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0103809
httpclient post json,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1074857
httpclient post json,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0928695
httpclient post json,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0923691
httpclient post json,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0781456
httpclient post json,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0733757
httpclient post json,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0678691
httpclient post json,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.059501
httpclient post json,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0517433
httpclient post json,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0511441
httpclient post json,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0474312
get inner html,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1018337
get inner html,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.093161
get inner html,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0869263
get inner html,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0738984
get inner html,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0701537
get inner html,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0611008
get inner html,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0592829
get inner html,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0481178
get inner html,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0474312
get inner html,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0402868
convert string to number,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0305696
convert string to number,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0211431
convert string to number,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0187178
convert string to number,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0186005
convert string to number,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0171095
convert string to number,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0165238
convert string to number,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0159351
convert string to number,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0146868
convert string to number,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0142531
convert string to number,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,1.0134374
format date,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0127401
format date,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0096705
format date,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0000455
format date,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9940798
format date,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.99285626
format date,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,0.9909831
format date,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.98961556
format date,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.98843586
format date,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.9880181
format date,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9875288
readonly array,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0104381
readonly array,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0085528
readonly array,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0052091
readonly array,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0050551
readonly array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0047352
readonly array,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0042872
readonly array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0038255
readonly array,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0026684
readonly array,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0026035
readonly array,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.002538
filter array,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0304797
filter array,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0288168
filter array,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0282483
filter array,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0266087
filter array,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.0248622
filter array,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.0247649
filter array,"def _determine_resource_pool(session, vm_):
    '''
    Called by create() used to determine resource pool
    '''
    resource_pool = ''
    if 'resource_pool' in vm_.keys():
        resource_pool = _get_pool(vm_['resource_pool'], session)
    else:
        pool = session.xenapi.pool.get_all()
        if not pool:
            resource_pool = None
        else:
            first_pool = session.xenapi.pool.get_all()[0]
            resource_pool = first_pool
    pool_record = session.xenapi.pool.get_record(resource_pool)
    log.debug('resource pool: %s', pool_record['name_label'])
    return resource_pool",_determine_resource_pool,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/cloud/clouds/xen.py#L514-L530,1.0246817
filter array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0242473
filter array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0232848
filter array,"def decode_string(s):
    """"""
    :type s: str
    :rtype: str
    """"""
    stack = []; cur_num = 0; cur_string = ''
    for c in s:
        if c == '[':
            stack.append((cur_string, cur_num))
            cur_string = ''
            cur_num = 0
        elif c == ']':
            prev_string, num = stack.pop()
            cur_string = prev_string + num * cur_string
        elif c.isdigit():
            cur_num = cur_num*10 + int(c)
        else:
            cur_string += c
    return cur_string",decode_string,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/strings/decode_string.py#L20-L38,1.0230488
map to json,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1135796
map to json,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1005061
map to json,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1000426
map to json,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0912954
map to json,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0794817
map to json,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0757484
map to json,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.069305
map to json,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0664833
map to json,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0615984
map to json,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0597969
parse json file,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0877881
parse json file,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0786558
parse json file,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0733194
parse json file,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0618176
parse json file,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0563331
parse json file,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0491747
parse json file,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0460997
parse json file,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0377382
parse json file,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0368758
parse json file,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0338306
get current observable value,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1274942
get current observable value,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.126686
get current observable value,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1018578
get current observable value,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0955298
get current observable value,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0846213
get current observable value,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.08414
get current observable value,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0690299
get current observable value,"def print_npa(self, record):
        print('IP Number: %s' % record.ip_n)
        print('Writer Name: %s' % record.ip_writer_name)
        print('Name: %s' % record.ip_name)
        print('Language: %s' % record.language_code)",CWRPrinter.print_npa,https://github.com/weso/CWR-DataApi/blob/f3b6ba8308c901b6ab87073c155c08e30692333c/cwr/utils/printer.py#L201-L205,1.0636917
get current observable value,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0596575
get current observable value,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0594867
get name of enumerated value,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1012058
get name of enumerated value,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0926045
get name of enumerated value,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0842007
get name of enumerated value,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0687133
get name of enumerated value,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0686903
get name of enumerated value,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0680153
get name of enumerated value,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0660324
get name of enumerated value,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0633696
get name of enumerated value,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0621275
get name of enumerated value,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,1.0605166
encode url,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0398841
encode url,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0392169
encode url,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0228448
encode url,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0203221
encode url,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0185009
encode url,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0139209
encode url,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.010247
encode url,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0090746
encode url,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0073252
encode url,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0063196
create cookie,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0679827
create cookie,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0604452
create cookie,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0551726
create cookie,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0473108
create cookie,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0407565
create cookie,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0394382
create cookie,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0295076
create cookie,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0258447
create cookie,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0249891
create cookie,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0231534
how to empty array,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1128086
how to empty array,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.1093216
how to empty array,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.108362
how to empty array,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.1077944
how to empty array,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.1069413
how to empty array,"def BadResponse(body, request, status_code=None,
                    headers=None):
        """"""
        Construct a Bad HTTP response (defined in DEFAULT_BAD_RESPONSE_CODE)

        :param body: The body of the response
        :type  body: ``str``

        :param request: The HTTP request
        :type  request: :class:`requests.Request`

        :param status_code: The return status code, defaults
            to DEFAULT_GOOD_STATUS_CODE if not specified
        :type  status_code: ``int``

        :param headers: Response headers, defaults to
            DEFAULT_RESPONSE_HEADERS if not specified
        :type  headers: ``dict``

        :rtype: :class:`requests.Response`
        :returns: a Response object
        """"""
        response = Response()
        response.url = request.url
        response.raw = BytesIO(body)
        if status_code:
            response.status_code = status_code
        else:
            response.status_code = DEFAULT_BAD_STATUS_CODE
        if headers:
            response.headers = headers
        else:
            response.headers = DEFAULT_RESPONSE_HEADERS
        response.request = request
        response._content = body
        return response",StaticResponseFactory.BadResponse,https://github.com/tonybaloney/requests-staticmock/blob/431a68acc8e04eec42143bd1de43635cbc94fc3f/requests_staticmock/responses.py#L71-L106,1.1064736
how to empty array,"def GoodResponse(body, request, status_code=None,
                     headers=None):
        """"""
        Construct a Good HTTP response (defined in DEFAULT_GOOD_RESPONSE_CODE)

        :param body: The body of the response
        :type  body: ``str``

        :param request: The HTTP request
        :type  request: :class:`requests.Request`

        :param status_code: The return status code, defaults
            to DEFAULT_GOOD_STATUS_CODE if not specified
        :type  status_code: ``int``

        :param headers: Response headers, defaults to
            DEFAULT_RESPONSE_HEADERS if not specified
        :type  headers: ``dict``

        :rtype: :class:`requests.Response`
        :returns: a Response object
        """"""
        response = Response()
        response.url = request.url
        response.raw = BytesIO(body)
        if status_code:
            response.status_code = status_code
        else:
            response.status_code = DEFAULT_GOOD_STATUS_CODE
        if headers:
            response.headers = headers
        else:
            response.headers = DEFAULT_RESPONSE_HEADERS
        response.request = request
        response._content = body
        return response",StaticResponseFactory.GoodResponse,https://github.com/tonybaloney/requests-staticmock/blob/431a68acc8e04eec42143bd1de43635cbc94fc3f/requests_staticmock/responses.py#L33-L68,1.1064736
how to empty array,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.1063933
how to empty array,"def decode_string(s):
    """"""
    :type s: str
    :rtype: str
    """"""
    stack = []; cur_num = 0; cur_string = ''
    for c in s:
        if c == '[':
            stack.append((cur_string, cur_num))
            cur_string = ''
            cur_num = 0
        elif c == ']':
            prev_string, num = stack.pop()
            cur_string = prev_string + num * cur_string
        elif c.isdigit():
            cur_num = cur_num*10 + int(c)
        else:
            cur_string += c
    return cur_string",decode_string,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/strings/decode_string.py#L20-L38,1.1054504
how to empty array,"def eventregistration_list(self,obj):
        eregs = obj.eventregistration_set.all()
        if not eregs:
            return ''
        return_string = '<ul>'

        for ereg in eregs:
            this_string = '<li>'
            if ereg.cancelled:
                this_string += '<em>%s</em> ' % _('CANCELLED:')
            if ereg.dropIn:
                this_string += '<em>%s</em> ' % _('DROP-IN:')
            if ereg.event.month:
                this_string += '%s %s, %s</li>' % (month_name[ereg.event.month], ereg.event.year, ereg.event.name)
            else:
                this_string += '%s</li>' % ereg.event.name
            return_string += this_string
        return return_string",CustomerRegistrationInline.eventregistration_list,https://github.com/django-danceschool/django-danceschool/blob/bb08cbf39017a812a5a94bdb4ea34170bf1a30ba/danceschool/core/admin.py#L445-L462,1.1052558
how to get current date,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0511464
how to get current date,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0476351
how to get current date,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0342909
how to get current date,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0342469
how to get current date,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0321507
how to get current date,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.031704
how to get current date,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0310048
how to get current date,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.030822
how to get current date,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0301452
how to get current date,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0298438
how to make the checkbox checked,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0525402
how to make the checkbox checked,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,1.0516782
how to make the checkbox checked,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0505244
how to make the checkbox checked,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,1.0493964
how to make the checkbox checked,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,1.0474715
how to make the checkbox checked,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,1.0447716
how to make the checkbox checked,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0444324
how to make the checkbox checked,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.043834
how to make the checkbox checked,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.0428342
how to make the checkbox checked,"def deep_update(config, override_config):
    for k, v in six.iteritems(override_config):
        if isinstance(v, Mapping):
            k_config = config.get(k, {})
            if isinstance(k_config, Mapping):
                v_config = deep_update(k_config, v)
                config[k] = v_config
            else:
                config[k] = v
        else:
            config[k] = override_config[k]
    return config",deep_update,https://github.com/polyaxon/rhea/blob/f47b59777cd996d834a0497a1ab442541aaa8a62/rhea/utils.py#L9-L20,1.042697
initializing array,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0119135
initializing array,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0097027
initializing array,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0063528
initializing array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0062191
initializing array,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0058975
initializing array,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.005513
initializing array,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0053214
initializing array,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0038155
initializing array,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.0036899
initializing array,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.00359
how to reverse a string,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1387933
how to reverse a string,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.131808
how to reverse a string,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1297467
how to reverse a string,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.1286993
how to reverse a string,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1265595
how to reverse a string,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.1264004
how to reverse a string,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.1256363
how to reverse a string,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.1250672
how to reverse a string,"def _convert(self, val):
        obj = {}
        for pair in list_regex.findall(val):
            pair = self.kv_regex.split(pair)
            if len(pair) == 1:
                k, v = pair[0], ''
            else:
                k, v = pair
            assert k in self.validators
            val = self.validators[k](v)
            if k in obj:
                log.warn('key: {!r} overwritten '
                         'new: {!r} old: {!r}'.format(k, val, obj[k]))
            obj[k] = val
        return obj",Dict._convert,https://github.com/jthacker/terseparse/blob/236a31faf819f3ae9019a545613b8e7a6808f7b2/terseparse/types.py#L212-L226,1.1247833
how to reverse a string,"def display_data_item(self, data_item: DataItem, source_display_panel=None, source_data_item=None):
        """"""Display a new data item and gives it keyboard focus. Uses existing display if it is already displayed.

        .. versionadded:: 1.0

        Status: Provisional
        Scriptable: Yes
        """"""
        for display_panel in self.__document_controller.workspace_controller.display_panels:
            if display_panel.data_item == data_item._data_item:
                display_panel.request_focus()
                return DisplayPanel(display_panel)
        result_display_panel = self.__document_controller.next_result_display_panel()
        if result_display_panel:
            display_item = self.__document_controller.document_model.get_display_item_for_data_item(data_item._data_item)
            result_display_panel.set_display_panel_display_item(display_item)
            result_display_panel.request_focus()
            return DisplayPanel(result_display_panel)
        return None",DocumentWindow.display_data_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L2607-L2625,1.1214669
read properties file,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0163685
read properties file,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0088938
read properties file,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.003993
read properties file,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0017538
read properties file,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0006231
read properties file,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0002675
read properties file,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.9995236
read properties file,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,0.9989455
read properties file,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,0.99887174
read properties file,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,0.998656
copy to clipboard,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0333598
copy to clipboard,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0280619
copy to clipboard,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0185158
copy to clipboard,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0148811
copy to clipboard,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0139441
copy to clipboard,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,1.0088521
copy to clipboard,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0085881
copy to clipboard,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0053563
copy to clipboard,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.004952
copy to clipboard,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0040534
convert html to pdf,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0507015
convert html to pdf,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0498037
convert html to pdf,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0495981
convert html to pdf,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0492402
convert html to pdf,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0480318
convert html to pdf,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0480249
convert html to pdf,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0450776
convert html to pdf,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0431458
convert html to pdf,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0421491
convert html to pdf,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0420928
json to xml conversion,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0539957
json to xml conversion,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0532739
json to xml conversion,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0351912
json to xml conversion,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0338526
json to xml conversion,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.030348
json to xml conversion,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0269916
json to xml conversion,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.020231
json to xml conversion,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0197537
json to xml conversion,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0190265
json to xml conversion,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.018754
how to randomly pick a number,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0345801
how to randomly pick a number,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,1.0339379
how to randomly pick a number,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0337108
how to randomly pick a number,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0337055
how to randomly pick a number,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0328753
how to randomly pick a number,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,1.0321454
how to randomly pick a number,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.0312159
how to randomly pick a number,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0310241
how to randomly pick a number,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.030847
how to randomly pick a number,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0306649
normal distribution,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.98045975
normal distribution,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9796946
normal distribution,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9786676
normal distribution,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9754427
normal distribution,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.97510266
normal distribution,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9749693
normal distribution,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,0.974493
normal distribution,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.97353095
normal distribution,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.9722615
normal distribution,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,0.97182107
nelder mead optimize,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9900599
nelder mead optimize,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.98940456
nelder mead optimize,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.9868866
nelder mead optimize,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.9862903
nelder mead optimize,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.9828932
nelder mead optimize,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.98272043
nelder mead optimize,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,0.9826671
nelder mead optimize,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.9826358
nelder mead optimize,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.9820698
nelder mead optimize,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,0.9810048
hash set for counting distinct elements,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1200751
hash set for counting distinct elements,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.1123395
hash set for counting distinct elements,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.1107413
hash set for counting distinct elements,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.1095818
hash set for counting distinct elements,"def to_protobuf(self):
        """"""Return a protobuf corresponding to the key.

        :rtype: :class:`.entity_pb2.Key`
        :returns: The protobuf representing the key.
        """"""
        key = _entity_pb2.Key()
        key.partition_id.project_id = self.project

        if self.namespace:
            key.partition_id.namespace_id = self.namespace

        for item in self.path:
            element = key.path.add()
            if ""kind"" in item:
                element.kind = item[""kind""]
            if ""id"" in item:
                element.id = item[""id""]
            if ""name"" in item:
                element.name = item[""name""]

        return key",Key.to_protobuf,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/datastore/google/cloud/datastore/key.py#L280-L301,1.1082203
hash set for counting distinct elements,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.106883
hash set for counting distinct elements,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.1067767
hash set for counting distinct elements,"def deep_update(config, override_config):
    for k, v in six.iteritems(override_config):
        if isinstance(v, Mapping):
            k_config = config.get(k, {})
            if isinstance(k_config, Mapping):
                v_config = deep_update(k_config, v)
                config[k] = v_config
            else:
                config[k] = v
        else:
            config[k] = override_config[k]
    return config",deep_update,https://github.com/polyaxon/rhea/blob/f47b59777cd996d834a0497a1ab442541aaa8a62/rhea/utils.py#L9-L20,1.1066197
hash set for counting distinct elements,"def _outrep_summary(self, rep):
        # Find corresponding item
        for item in self.nbval_items:
            if item.nodeid == rep.nodeid:
                # item found, output
                # Sanitize reference cell
                ref_cell = item.cell
                ref_cell.outputs = item.sanitize_outputs(ref_cell.outputs)
                self.nb_ref.cells.append(item.cell)
                test_cell = copy.copy(item.cell)
                if item.test_outputs:
                    test_cell.outputs = item.sanitize_outputs(item.test_outputs)
                self.nb_test.cells.append(test_cell)",NbdimeReporter._outrep_summary,https://github.com/fastai/fastai/blob/9fb84a5cdefe5a766cdb792b8f5d8971737b7e67/docs_src/nbval/nbdime_reporter.py#L130-L142,1.1066025
hash set for counting distinct elements,"async def subscribe(self, request):
        if type(request.params) is not list:
            request.params = [request.params]

        for topic in request.params:
            if topic and topic in request.topics:
                request.subscriptions.add(topic)

                if topic in self.state:
                    await request.send_notification(topic, self.state[topic])

        return list(request.subscriptions)",JsonRpc.subscribe,https://github.com/pengutronix/aiohttp-json-rpc/blob/24ec9ae9ae0633b2deaae7e29f6056f150cb4025/aiohttp_json_rpc/rpc.py#L386-L397,1.106502
how to get database table name,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0945711
how to get database table name,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0839459
how to get database table name,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0822605
how to get database table name,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0755094
how to get database table name,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0649678
how to get database table name,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.0641551
how to get database table name,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.062855
how to get database table name,"def quoted_split(string, sep, quotes='""'):
    """"""
    Split a string on the given separation character, but respecting
    double-quoted sections of the string.  Returns an iterator.

    :param string: The string to split.
    :param sep: The character separating sections of the string.
    :param quotes: A string specifying all legal quote characters.

    :returns: An iterator which will iterate over each element of the
              string separated by the designated separator.
    """"""

    # Initialize the algorithm
    start = None
    escape = False
    quote = False

    # Walk through the string
    for i, c in enumerate(string):
        # Save the start index
        if start is None:
            start = i

        # Handle escape sequences
        if escape:
            escape = False

        # Handle quoted strings
        elif quote:
            if c == '\\':
                escape = True
            elif c == quote:
                quote = False

        # Handle the separator
        elif c == sep:
            yield string[start:i]
            start = None

        # Handle quotes
        elif c in quotes:
            quote = c

    # Yield the last part
    if start is not None:
        yield string[start:]",quoted_split,https://github.com/klmitch/aversion/blob/90ca68e7d6426a77db8a926171f8d3bbeb00ee4c/aversion.py#L29-L75,1.0616523
how to get database table name,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0612814
how to get database table name,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.0590903
deserialize json,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1827364
deserialize json,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1714147
deserialize json,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.1494892
deserialize json,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.1405573
deserialize json,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1369728
deserialize json,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.1244876
deserialize json,"def callback(cfunc):
    """"""
    Turn a ctypes CFUNCTYPE instance into a value which can be passed into PyROOT
    """"""
    # Note:
    # ROOT wants a c_voidp whose addressof() == the call site of the target
    # function. This hackery is necessary to achieve that.
    return C.c_voidp.from_address(C.cast(cfunc, C.c_voidp).value)",callback,https://github.com/rootpy/rootpy/blob/3926935e1f2100d8ba68070c2ab44055d4800f73/rootpy/utils/cinterface.py#L21-L28,1.1195874
deserialize json,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.1189882
deserialize json,"def print_npa(self, record):
        print('IP Number: %s' % record.ip_n)
        print('Writer Name: %s' % record.ip_writer_name)
        print('Name: %s' % record.ip_name)
        print('Language: %s' % record.language_code)",CWRPrinter.print_npa,https://github.com/weso/CWR-DataApi/blob/f3b6ba8308c901b6ab87073c155c08e30692333c/cwr/utils/printer.py#L201-L205,1.1053877
deserialize json,"def perform(self):
        display_item = self.__document_model.get_display_item_by_uuid(self.__display_item_uuid)
        display_item.display_type = self.__display_type",ChangeDisplayTypeCommand.perform,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Inspector.py#L1236-L1238,1.1047778
find int in string,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0972898
find int in string,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0916291
find int in string,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0855737
find int in string,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0810076
find int in string,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0778639
find int in string,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0728017
find int in string,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0707421
find int in string,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.069668
find int in string,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0692594
find int in string,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,1.0688306
get current process id,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1108639
get current process id,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1084931
get current process id,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0914041
get current process id,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0868481
get current process id,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0747472
get current process id,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.070244
get current process id,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0605544
get current process id,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0508306
get current process id,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.049777
get current process id,"def print_npa(self, record):
        print('IP Number: %s' % record.ip_n)
        print('Writer Name: %s' % record.ip_writer_name)
        print('Name: %s' % record.ip_name)
        print('Language: %s' % record.language_code)",CWRPrinter.print_npa,https://github.com/weso/CWR-DataApi/blob/f3b6ba8308c901b6ab87073c155c08e30692333c/cwr/utils/printer.py#L201-L205,1.0491555
regex case insensitive,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0171514
regex case insensitive,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0147415
regex case insensitive,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0122422
regex case insensitive,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0121692
regex case insensitive,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.0119566
regex case insensitive,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0117141
regex case insensitive,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0107678
regex case insensitive,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0107604
regex case insensitive,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0104325
regex case insensitive,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0095959
custom http error response,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1041919
custom http error response,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0958639
custom http error response,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0946145
custom http error response,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0815511
custom http error response,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0760387
custom http error response,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.068759
custom http error response,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0604917
custom http error response,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0592734
custom http error response,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0549244
custom http error response,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0523397
how to determine a string is a valid word,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1379645
how to determine a string is a valid word,"def _create_user_dict(user):
        properties = {}

        if user.firstname:
            properties['firstname'] = user.firstname

        if user.lastname:
            properties['lastname'] = user.lastname

        if user.email:
            properties['email'] = user.email

        if user.password:
            properties['password'] = user.password

        # Optional Properties
        if user.administrator:
            properties['administrator'] = user.administrator

        if user.force_sec_auth:
            properties['forceSecAuth'] = user.force_sec_auth

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_user_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2708-L2734,1.1099106
how to determine a string is a valid word,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1093423
how to determine a string is a valid word,"def set_chorus(self, nr=-1, level=-1.0, speed=-1.0, depth=-1.0, type=-1):
        """"""                                  
        nr Chorus voice count (0-99, CPU time consumption proportional to this value)
        level Chorus level (0.0-10.0)
        speed Chorus speed in Hz (0.29-5.0)
        depth_ms Chorus depth (max value depends on synth sample rate, 0.0-21.0 is safe for sample rate values up to 96KHz)
        type Chorus waveform type (0=sine, 1=triangle)
        """"""
        set=0
        if nr>=0:
            set+=0b00001
        if level>=0:
            set+=0b00010
        if speed>=0:
            set+=0b00100
        if depth>=0:
            set+=0b01000
        if type>=0:
            set+=0b10000
        return fluid_synth_set_chorus_full(self.synth, set, nr, level, speed, depth, type)",Synth.set_chorus,https://github.com/nwhitehead/pyfluidsynth/blob/9a8ecee996e83a279e8d29d75e8a859aee4aba67/fluidsynth.py#L537-L556,1.1049024
how to determine a string is a valid word,"def _create_group_dict(group):
        properties = {}

        if group.name:
            properties['name'] = group.name

        # Optional Properties
        if group.reserve_ip:
            properties['reserveIp'] = group.reserve_ip

        if group.create_snapshot:
            properties['createSnapshot'] = group.create_snapshot

        if group.create_datacenter:
            properties['createDataCenter'] = \
                group.create_datacenter

        if group.access_activity_log:
            properties['accessActivityLog'] = \
                group.access_activity_log

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_group_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2680-L2705,1.1048195
how to determine a string is a valid word,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.1044551
how to determine a string is a valid word,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0961434
how to determine a string is a valid word,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.095698
how to determine a string is a valid word,"def get_options(self):
        option_list = []
        for option, value in self.options.items():
            if len(option) == 1:
                option_str = '-%s' % option
            elif option.startswith('-'):
                option_str = option[1:]
            else:
                option_str = '--%s' % option

            if value:
                option_str = '%s%s%s' % (option_str, self.param_sep, value)

            option_list.append(option_str)
        return ' '.join(option_list)",MinifyTask.get_options,https://github.com/mathiasertl/fabric-webbuilders/blob/9db2b2fbd95f6b818186b5166f8256c5d4ea0a4e/fabric_webbuilders/base.py#L212-L226,1.0935752
how to determine a string is a valid word,"def get_param_names(model_obj):
    """"""
    Extracts all the names to be displayed for the estimated parameters.

    Parameters
    ----------
    model_obj : an instance of an MNDC object.
        Should have the following attributes:
        `['ind_var_names', 'intercept_names', 'shape_names', 'nest_names']`.

    Returns
    -------
    all_names : list of strings.
        There will be one element for each estimated parameter. The order of
        the parameter names will be
        `['nest_parameters', 'shape_parameters', 'outside_intercepts',
          'index_coefficients']`.
    """"""
    # Get the index coefficient names
    all_names = deepcopy(model_obj.ind_var_names)
    # Add the intercept names if any exist
    if model_obj.intercept_names is not None:
        all_names = model_obj.intercept_names + all_names
    # Add the shape names if any exist
    if model_obj.shape_names is not None:
        all_names = model_obj.shape_names + all_names
    # Add the nest names if any exist
    if model_obj.nest_names is not None:
        all_names = model_obj.nest_names + all_names
    return all_names",get_param_names,https://github.com/timothyb0912/pylogit/blob/f83b0fd6debaa7358d87c3828428f6d4ead71357/pylogit/bootstrap.py#L46-L75,1.0907366
html entities replace,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1023923
html entities replace,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0945162
html entities replace,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0899458
html entities replace,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.078783
html entities replace,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0749254
html entities replace,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0638096
html entities replace,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0618669
html entities replace,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0573775
html entities replace,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0525545
html entities replace,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0493419
set file attrib hidden,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0334853
set file attrib hidden,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0305631
set file attrib hidden,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0139719
set file attrib hidden,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0111129
set file attrib hidden,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0104436
set file attrib hidden,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0100634
set file attrib hidden,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0092734
set file attrib hidden,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0086174
set file attrib hidden,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0084085
set file attrib hidden,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.006812
sorting multiple arrays based on another arrays sorted order,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.4022255
sorting multiple arrays based on another arrays sorted order,"def get_function_call_str(fn, args, kwargs):
    """"""Converts method call (function and its arguments) to a str(...)-like string.""""""

    def str_converter(v):
        try:
            return str(v)
        except Exception:
            try:
                return repr(v)
            except Exception:
                return ""<n/a str raised>""

    result = get_full_name(fn) + ""(""
    first = True
    for v in args:
        if first:
            first = False
        else:
            result += "",""
        result += str_converter(v)
    for k, v in kwargs.items():
        if first:
            first = False
        else:
            result += "",""
        result += str(k) + ""="" + str_converter(v)
    result += "")""
    return result",get_function_call_str,https://github.com/quora/qcore/blob/fa5cd438eea554db35fd29cbc8dfbde69f09961c/qcore/inspection.py#L85-L112,1.4021642
sorting multiple arrays based on another arrays sorted order,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.4008011
sorting multiple arrays based on another arrays sorted order,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.394978
sorting multiple arrays based on another arrays sorted order,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.394883
sorting multiple arrays based on another arrays sorted order,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.3946528
sorting multiple arrays based on another arrays sorted order,"def get_function_call_repr(fn, args, kwargs):
    """"""Converts method call (function and its arguments) to a repr(...)-like string.""""""

    result = get_full_name(fn) + ""(""
    first = True
    for v in args:
        if first:
            first = False
        else:
            result += "",""
        result += repr(v)
    for k, v in kwargs.items():
        if first:
            first = False
        else:
            result += "",""
        result += str(k) + ""="" + repr(v)
    result += "")""
    return result",get_function_call_repr,https://github.com/quora/qcore/blob/fa5cd438eea554db35fd29cbc8dfbde69f09961c/qcore/inspection.py#L115-L133,1.3946352
sorting multiple arrays based on another arrays sorted order,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.3941234
sorting multiple arrays based on another arrays sorted order,"def _request(self, method, url, params, headers, content, form_content):
        # type: (str, str, Optional[Dict[str, str]], Optional[Dict[str, str]], Any, Optional[Dict[str, Any]]) -> ClientRequest
        """"""Create ClientRequest object.

        :param str url: URL for the request.
        :param dict params: URL query parameters.
        :param dict headers: Headers
        :param dict form_content: Form content
        """"""
        request = ClientRequest(method, self.format_url(url))

        if params:
            request.format_parameters(params)

        if headers:
            request.headers.update(headers)
        # All requests should contain a Accept.
        # This should be done by Autorest, but wasn't in old Autorest
        # Force it for now, but might deprecate it later.
        if ""Accept"" not in request.headers:
            _LOGGER.debug(""Accept header absent and forced to application/json"")
            request.headers['Accept'] = 'application/json'

        if content is not None:
            request.add_content(content)

        if form_content:
            request.add_formdata(form_content)

        return request",_ServiceClientCore._request,https://github.com/Azure/msrest-for-python/blob/0732bc90bdb290e5f58c675ffdd7dbfa9acefc93/msrest/service_client.py#L99-L128,1.3935411
sorting multiple arrays based on another arrays sorted order,"def CreateDataset(opt):
    dataset = None
    if opt.dataset_mode == 'aligned':
        from .aligned_dataset import AlignedDataset
        dataset = AlignedDataset()
    elif opt.dataset_mode == 'unaligned':
        from .unaligned_dataset import UnalignedDataset
        dataset = UnalignedDataset()
    elif opt.dataset_mode == 'single':
        from .single_dataset import SingleDataset
        dataset = SingleDataset()
    else:
        raise ValueError(""Dataset [%s] not recognized."" % opt.dataset_mode)

    print(""dataset [%s] was created"" % (dataset.name()))
    dataset.initialize(opt)
    return dataset",CreateDataset,https://github.com/fastai/fastai/blob/9fb84a5cdefe5a766cdb792b8f5d8971737b7e67/courses/dl2/cgan/data/custom_dataset_data_loader.py#L5-L21,1.3931311
string similarity levenshtein,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0680883
string similarity levenshtein,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0572443
string similarity levenshtein,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0490425
string similarity levenshtein,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0404534
string similarity levenshtein,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.036092
string similarity levenshtein,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0355659
string similarity levenshtein,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0228065
string similarity levenshtein,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0214503
string similarity levenshtein,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0188265
string similarity levenshtein,"def new_display_editor_dialog(self, display_item: DisplayItem.DisplayItem=None):
        if not display_item:
            display_item = self.selected_display_item
        if display_item:
            edit_display_dialog = DisplayEditorPanel.DisplayEditorDialog(self, display_item)
            edit_display_dialog.show()
            self.register_dialog(edit_display_dialog)",DocumentController.new_display_editor_dialog,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L1019-L1025,1.0179803
how to get html of website,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.1079879
how to get html of website,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.1070831
how to get html of website,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1062086
how to get html of website,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.1060475
how to get html of website,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1056317
how to get html of website,"def __init__(self, text: str, url: str = None, callback_data: str = None,
                 switch_inline_query: str = None,
                 switch_inline_query_current_chat: str = None,
                 callback_game: 'CallbackGame' = None) -> None:
        data = {
            'text': text,
        }
        if url is not None:
            data['url'] = url
        if callback_data is not None:
            data['callback_data'] = callback_data
        if switch_inline_query is not None:
            data['switch_inline_query'] = switch_inline_query
        if switch_inline_query_current_chat is not None:
            data['switch_inline_query_current_chat'] = switch_inline_query_current_chat
        if callback_game is not None:
            data['callback_game'] = callback_game
        self._data = data",InlineKeyboardButton.__init__,https://github.com/legnaleurc/wcpan.telegram/blob/61a172203ff69b6490e52a64bf55d47aeef1e148/wcpan/telegram/types.py#L697-L714,1.1056266
how to get html of website,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.1046195
how to get html of website,"def serialize(self):
        data = {}
        if self.name:
            data['name'] = self.name
        if self.host_port:
            data['hostPort'] = self.host_port
        if self.container_port:
            data['containerPort'] = self.container_port
        if self.protocol:
            data['protocol'] = self.protocol
        if self.host_ip:
            data['hostIP'] = self.host_ip
        return data",ContainerPort.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/ContainerPort.py#L114-L126,1.1045138
how to get html of website,"def _get_elements_and_parameters(
            self, width, height, x, y, default_format):
        parent = super()._get_elements_and_parameters(
            width, height, x, y, default_format)
        for i, (element, width, height, x, y, default_format) in enumerate(
                parent):
            zebra_format = self._formats[i % 2]
            if zebra_format:
                if default_format:
                    default_format = default_format + zebra_format
                else:
                    default_format = zebra_format
            yield element, width, height, x, y, default_format",Zebra._get_elements_and_parameters,https://github.com/ch3pjw/junction/blob/7d0c4d279589bee8ae7b3ac4dee2ab425c0b1b0e/jcn/container_elements.py#L250-L262,1.104108
how to get html of website,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.1026595
buffered file reader read text,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.1047062
buffered file reader read text,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.1041682
buffered file reader read text,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0956131
buffered file reader read text,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0837147
buffered file reader read text,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0752548
buffered file reader read text,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0639099
buffered file reader read text,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0606185
buffered file reader read text,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0558292
buffered file reader read text,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0486617
buffered file reader read text,"def callback(cfunc):
    """"""
    Turn a ctypes CFUNCTYPE instance into a value which can be passed into PyROOT
    """"""
    # Note:
    # ROOT wants a c_voidp whose addressof() == the call site of the target
    # function. This hackery is necessary to achieve that.
    return C.c_voidp.from_address(C.cast(cfunc, C.c_voidp).value)",callback,https://github.com/rootpy/rootpy/blob/3926935e1f2100d8ba68070c2ab44055d4800f73/rootpy/utils/cinterface.py#L21-L28,1.0469202
encrypt aes ctr mode,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0019658
encrypt aes ctr mode,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0000224
encrypt aes ctr mode,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9982467
encrypt aes ctr mode,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.99512106
encrypt aes ctr mode,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.99510086
encrypt aes ctr mode,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.9945125
encrypt aes ctr mode,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9932649
encrypt aes ctr mode,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.99201673
encrypt aes ctr mode,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.9908759
encrypt aes ctr mode,"def update_reading_events(readings, event_record):
    """""" Updates readings from a 300 row to reflect any events found in a
        subsequent 400 row
    """"""
    # event intervals are 1-indexed
    for i in range(event_record.start_interval - 1, event_record.end_interval):
        readings[i] = Reading(
            t_start=readings[i].t_start,
            t_end=readings[i].t_end,
            read_value=readings[i].read_value,
            uom=readings[i].uom,
            quality_method=event_record.quality_method,
            event_code=event_record.reason_code,
            event_desc=event_record.reason_description,
            read_start=readings[i].read_start,
            read_end=readings[i].read_end)
    return readings",update_reading_events,https://github.com/aguinane/nem-reader/blob/5405a5cba4bb8ebdad05c28455d12bb34a6d3ce5/nemreader/nem_reader.py#L239-L255,0.9906087
matrix multiply,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.9962489
matrix multiply,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9962181
matrix multiply,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.9840515
matrix multiply,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9828139
matrix multiply,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.9815167
matrix multiply,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9809794
matrix multiply,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,0.97902316
matrix multiply,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.97663724
matrix multiply,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.97599703
matrix multiply,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.97579056
print model summary,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0708352
print model summary,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0690975
print model summary,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0568347
print model summary,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0537735
print model summary,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0533977
print model summary,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0533947
print model summary,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0523583
print model summary,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0514891
print model summary,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0508149
print model summary,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.050748
unique elements,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.132672
unique elements,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.132378
unique elements,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.109885
unique elements,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.1037078
unique elements,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0928152
unique elements,"def _format_single_ship(record):
    return [
        record.index,
        record.id,
        record.pos.x,
        record.pos.y,
    ]",_format_single_ship,https://github.com/IL2HorusTeam/il2fb-ds-middleware/blob/7ebde962f5774263b4b9c3dd9c7d2e5e51493dcf/examples/radar.py#L137-L143,1.0909424
unique elements,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0783639
unique elements,"def intern(obj, timeout):
    """"""
    Tell untwisted to process an extern event
    loop.
    """"""

    core.gear.timeout = timeout
    core.gear.pool.append(obj)",intern,https://github.com/untwisted/untwisted/blob/8a8d9c8a8d0f3452d5de67cd760297bb5759f637/untwisted/tkinter.py#L27-L34,1.0688406
unique elements,"def get_soap_object(self, client):
        custom_event = client.factory.create(self.soap_name)
        custom_event.eventName = self.event_name
        custom_event.eventId = self.event_id
        custom_event.eventStringDataMapping = self.event_string_data_mapping
        custom_event.eventDateDataMapping = self.event_date_data_mapping
        custom_event.eventNumberDataMapping = self.event_number_data_mapping
        return custom_event",CustomEvent.get_soap_object,https://github.com/jslang/responsys/blob/9b355a444c0c75dff41064502c1e2b76dfd5cb93/responsys/types.py#L230-L237,1.0688064
unique elements,"def callback(cfunc):
    """"""
    Turn a ctypes CFUNCTYPE instance into a value which can be passed into PyROOT
    """"""
    # Note:
    # ROOT wants a c_voidp whose addressof() == the call site of the target
    # function. This hackery is necessary to achieve that.
    return C.c_voidp.from_address(C.cast(cfunc, C.c_voidp).value)",callback,https://github.com/rootpy/rootpy/blob/3926935e1f2100d8ba68070c2ab44055d4800f73/rootpy/utils/cinterface.py#L21-L28,1.0685462
extract data from html content,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.1314561
extract data from html content,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.1264938
extract data from html content,"def decode_string(s):
    """"""
    :type s: str
    :rtype: str
    """"""
    stack = []; cur_num = 0; cur_string = ''
    for c in s:
        if c == '[':
            stack.append((cur_string, cur_num))
            cur_string = ''
            cur_num = 0
        elif c == ']':
            prev_string, num = stack.pop()
            cur_string = prev_string + num * cur_string
        elif c.isdigit():
            cur_num = cur_num*10 + int(c)
        else:
            cur_string += c
    return cur_string",decode_string,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/strings/decode_string.py#L20-L38,1.1259843
extract data from html content,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.1256099
extract data from html content,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.1253906
extract data from html content,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1252503
extract data from html content,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.1248919
extract data from html content,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.1245602
extract data from html content,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.1245172
extract data from html content,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.1238024
heatmap from 3d coordinates,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0220563
heatmap from 3d coordinates,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0177804
heatmap from 3d coordinates,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0159757
heatmap from 3d coordinates,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0152457
heatmap from 3d coordinates,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0147376
heatmap from 3d coordinates,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.0143827
heatmap from 3d coordinates,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0140569
heatmap from 3d coordinates,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0134482
heatmap from 3d coordinates,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0128566
heatmap from 3d coordinates,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.012588
get all parents of xml node,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0730426
get all parents of xml node,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0645219
get all parents of xml node,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0644644
get all parents of xml node,"def _get_elements_and_parameters(
            self, width, height, x, y, default_format):
        parent = super()._get_elements_and_parameters(
            width, height, x, y, default_format)
        for i, (element, width, height, x, y, default_format) in enumerate(
                parent):
            zebra_format = self._formats[i % 2]
            if zebra_format:
                if default_format:
                    default_format = default_format + zebra_format
                else:
                    default_format = zebra_format
            yield element, width, height, x, y, default_format",Zebra._get_elements_and_parameters,https://github.com/ch3pjw/junction/blob/7d0c4d279589bee8ae7b3ac4dee2ab425c0b1b0e/jcn/container_elements.py#L250-L262,1.0628586
get all parents of xml node,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0623112
get all parents of xml node,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0620314
get all parents of xml node,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.0615846
get all parents of xml node,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.0607494
get all parents of xml node,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.0596161
get all parents of xml node,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0593619
how to extract zip file recursively,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0604193
how to extract zip file recursively,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.052853
how to extract zip file recursively,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0410697
how to extract zip file recursively,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0318025
how to extract zip file recursively,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0315639
how to extract zip file recursively,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.028981
how to extract zip file recursively,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.024668
how to extract zip file recursively,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0239838
how to extract zip file recursively,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.023343
how to extract zip file recursively,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0229557
underline text in label widget,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.096641
underline text in label widget,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0964714
underline text in label widget,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0950646
underline text in label widget,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0947474
underline text in label widget,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0937324
underline text in label widget,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0918636
underline text in label widget,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.0915293
underline text in label widget,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.09135
underline text in label widget,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0895286
underline text in label widget,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.08945
unzipping large files,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,0.99569523
unzipping large files,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,0.99159515
unzipping large files,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,0.9907634
unzipping large files,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,0.9897185
unzipping large files,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,0.9866756
unzipping large files,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,0.98627853
unzipping large files,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,0.9858651
unzipping large files,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,0.98377526
unzipping large files,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,0.9826946
unzipping large files,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,0.9820781
copying a file to a path,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0823984
copying a file to a path,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.059041
copying a file to a path,"def get_options(self):
        option_list = []
        for option, value in self.options.items():
            if len(option) == 1:
                option_str = '-%s' % option
            elif option.startswith('-'):
                option_str = option[1:]
            else:
                option_str = '--%s' % option

            if value:
                option_str = '%s%s%s' % (option_str, self.param_sep, value)

            option_list.append(option_str)
        return ' '.join(option_list)",MinifyTask.get_options,https://github.com/mathiasertl/fabric-webbuilders/blob/9db2b2fbd95f6b818186b5166f8256c5d4ea0a4e/fabric_webbuilders/base.py#L212-L226,1.054964
copying a file to a path,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0504242
copying a file to a path,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.048523
copying a file to a path,"def set_chorus(self, nr=-1, level=-1.0, speed=-1.0, depth=-1.0, type=-1):
        """"""                                  
        nr Chorus voice count (0-99, CPU time consumption proportional to this value)
        level Chorus level (0.0-10.0)
        speed Chorus speed in Hz (0.29-5.0)
        depth_ms Chorus depth (max value depends on synth sample rate, 0.0-21.0 is safe for sample rate values up to 96KHz)
        type Chorus waveform type (0=sine, 1=triangle)
        """"""
        set=0
        if nr>=0:
            set+=0b00001
        if level>=0:
            set+=0b00010
        if speed>=0:
            set+=0b00100
        if depth>=0:
            set+=0b01000
        if type>=0:
            set+=0b10000
        return fluid_synth_set_chorus_full(self.synth, set, nr, level, speed, depth, type)",Synth.set_chorus,https://github.com/nwhitehead/pyfluidsynth/blob/9a8ecee996e83a279e8d29d75e8a859aee4aba67/fluidsynth.py#L537-L556,1.0470927
copying a file to a path,"def pw(min_word_length=3, max_word_length=8, max_int_value=1000, number_of_elements=4, no_special_characters=False):
    """"""
        Generate a password
    """"""

    # Set the position of the integer
    int_position = set_int_position(number_of_elements)

    # Load dictionary
    dictionary = load_dictionary()

    password = ''
    for i in range(number_of_elements):
        # Add word or integer
        if i == int_position:
            password += str(get_random_int(max_int_value))
        else:
            password += get_random_word(dictionary,
                                        min_word_length,
                                        max_word_length).title()

        # Add separator
        if i != number_of_elements - 1:
            password += get_random_separator(no_special_characters)

    return password",pw,https://github.com/gabfl/password-generator-py/blob/cd59078fd3e6ea85b7acd9bfcf6d04014c0f7220/src/pwgenerator.py#L71-L96,1.0470265
copying a file to a path,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0456678
copying a file to a path,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.0442835
copying a file to a path,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.0435406
get the description of a http status code,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1878781
get the description of a http status code,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.1735096
get the description of a http status code,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.1712059
get the description of a http status code,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.1676978
get the description of a http status code,"def set_chorus(self, nr=-1, level=-1.0, speed=-1.0, depth=-1.0, type=-1):
        """"""                                  
        nr Chorus voice count (0-99, CPU time consumption proportional to this value)
        level Chorus level (0.0-10.0)
        speed Chorus speed in Hz (0.29-5.0)
        depth_ms Chorus depth (max value depends on synth sample rate, 0.0-21.0 is safe for sample rate values up to 96KHz)
        type Chorus waveform type (0=sine, 1=triangle)
        """"""
        set=0
        if nr>=0:
            set+=0b00001
        if level>=0:
            set+=0b00010
        if speed>=0:
            set+=0b00100
        if depth>=0:
            set+=0b01000
        if type>=0:
            set+=0b10000
        return fluid_synth_set_chorus_full(self.synth, set, nr, level, speed, depth, type)",Synth.set_chorus,https://github.com/nwhitehead/pyfluidsynth/blob/9a8ecee996e83a279e8d29d75e8a859aee4aba67/fluidsynth.py#L537-L556,1.1676434
get the description of a http status code,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.1656346
get the description of a http status code,"def __init__(self, text: str, url: str = None, callback_data: str = None,
                 switch_inline_query: str = None,
                 switch_inline_query_current_chat: str = None,
                 callback_game: 'CallbackGame' = None) -> None:
        data = {
            'text': text,
        }
        if url is not None:
            data['url'] = url
        if callback_data is not None:
            data['callback_data'] = callback_data
        if switch_inline_query is not None:
            data['switch_inline_query'] = switch_inline_query
        if switch_inline_query_current_chat is not None:
            data['switch_inline_query_current_chat'] = switch_inline_query_current_chat
        if callback_game is not None:
            data['callback_game'] = callback_game
        self._data = data",InlineKeyboardButton.__init__,https://github.com/legnaleurc/wcpan.telegram/blob/61a172203ff69b6490e52a64bf55d47aeef1e148/wcpan/telegram/types.py#L697-L714,1.1654963
get the description of a http status code,"def serialize(self):
        data = {}
        if self.name:
            data['name'] = self.name
        if self.host_port:
            data['hostPort'] = self.host_port
        if self.container_port:
            data['containerPort'] = self.container_port
        if self.protocol:
            data['protocol'] = self.protocol
        if self.host_ip:
            data['hostIP'] = self.host_ip
        return data",ContainerPort.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/ContainerPort.py#L114-L126,1.1639632
get the description of a http status code,"def get_utilization(self, fields=None, filter=None, refresh=False, view=None):
        """"""Retrieves historical utilization data for the specified resource, metrics, and time span.

        Args:
            fields: Name of the supported metric(s) to be retrieved in the format METRIC[,METRIC]...
                If unspecified, all metrics supported are returned.

            filter (list or str): Filters should be in the format FILTER_NAME=VALUE[,FILTER_NAME=VALUE]...
                E.g.: 'startDate=2016-05-30T11:20:44.541Z,endDate=2016-05-30T19:20:44.541Z'

                startDate
                    Start date of requested starting time range in ISO 8601 format. If omitted, the startDate is
                    determined by the endDate minus 24 hours.
                endDate
                    End date of requested starting time range in ISO 8601 format. When omitted, the endDate includes
                    the latest data sample available.

                If an excessive number of samples would otherwise be returned, the results will be segmented. The
                caller is responsible for comparing the returned sliceStartTime with the requested startTime in the
                response. If the sliceStartTime is greater than the oldestSampleTime and the requested start time,
                the caller is responsible for repeating the request with endTime set to sliceStartTime to obtain the
                next segment. This process is repeated until the full data set is retrieved.

                If the resource has no data, the UtilizationData is still returned but will contain no samples and
                sliceStartTime/sliceEndTime will be equal. oldestSampleTime/newestSampleTime will still be set
                appropriately (null if no data is available). If the filter does not happen to overlap the data
                that a resource has, then the metric history service will return null sample values for any
                missing samples.

            refresh: Specifies that if necessary, an additional request will be queued to obtain the most recent
                utilization data from the iLO. The response will not include any refreshed data. To track the
                availability of the newly collected data, monitor the TaskResource identified by the refreshTaskUri
                property in the response. If null, no refresh was queued.

            view: Specifies the resolution interval length of the samples to be retrieved. This is reflected in the
                resolution in the returned response. Utilization data is automatically purged to stay within storage
                space constraints. Supported views are listed below:

                native
                    Resolution of the samples returned will be one sample for each 5-minute time period. This is the
                    default view and matches the resolution of the data returned by the iLO. Samples at this resolution
                    are retained up to one year.
                hour
                    Resolution of the samples returned will be one sample for each 60-minute time period. Samples are
                    calculated by averaging the available 5-minute data samples that occurred within the hour, except
                    for PeakPower which is calculated by reporting the peak observed 5-minute sample value data during
                    the hour. Samples at this resolution are retained up to three years.
                day
                    Resolution of the samples returned will be one sample for each 24-hour time period. One day is a
                    24-hour period that starts at midnight GMT regardless of the time zone in which the appliance or
                    client is located. Samples are calculated by averaging the available 5-minute data samples that
                    occurred during the day, except for PeakPower which is calculated by reporting the peak observed
                    5-minute sample value data during the day. Samples at this resolution are retained up to three
                    years.

        Returns:
            dict
        """"""
        resource_uri = self.data['uri']
        query = ''

        if filter:
            query += self._helper.make_query_filter(filter)

        if fields:
            query += ""&fields="" + quote(fields)

        if refresh:
            query += ""&refresh=true""

        if view:
            query += ""&view="" + quote(view)

        if query:
            query = ""?"" + query[1:]

        uri = ""{0}/utilization{1}"".format(self._helper.build_uri(resource_uri), query)

        return self._helper.do_get(uri)",ResourceUtilizationMixin.get_utilization,https://github.com/HewlettPackard/python-hpOneView/blob/3c6219723ef25e6e0c83d44a89007f89bc325b89/hpOneView/resources/resource.py#L879-L957,1.1623366
get the description of a http status code,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.1615804
randomly extract x items from a list,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.1224952
randomly extract x items from a list,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1203934
randomly extract x items from a list,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.1199553
randomly extract x items from a list,"def __repr__(self):
        more = ''
        if self.service:
            more += 'service=%r, ' % self.service
        if self.resource:
            more += 'resource=%r, ' % self.resource
        if self.event:
            more += 'event=%r, ' % self.event
        if self.group:
            more += 'group=%r, ' % self.group
        if self.tags:
            more += 'tags=%r, ' % self.tags
        if self.customer:
            more += 'customer=%r, ' % self.customer

        return 'Blackout(id={!r}, priority={!r}, status={!r}, environment={!r}, {}start_time={!r}, end_time={!r}, remaining={!r})'.format(
            self.id,
            self.priority,
            self.status,
            self.environment,
            more,
            self.start_time,
            self.end_time,
            self.remaining
        )",Blackout.__repr__,https://github.com/alerta/python-alerta-client/blob/7eb367b5fe87d5fc20b54dea8cddd7f09e251afa/alertaclient/models/blackout.py#L63-L87,1.1192284
randomly extract x items from a list,"def top_1(arr):
    values = {}
    #reserve each value which first appears on keys
    #reserve how many time each value appears by index number on values
    result = []
    f_val = 0

    for i in arr:
        if i in values:
            values[i] += 1
        else:
            values[i] = 1

    f_val = max(values.values())
        
    for i in values.keys():
        if values[i] == f_val:
            result.append(i)
        else:
            continue
    
    return result",top_1,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/arrays/top_1.py#L15-L36,1.1185528
randomly extract x items from a list,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.1183313
randomly extract x items from a list,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.1180314
randomly extract x items from a list,"async def subscribe(self, request):
        if type(request.params) is not list:
            request.params = [request.params]

        for topic in request.params:
            if topic and topic in request.topics:
                request.subscriptions.add(topic)

                if topic in self.state:
                    await request.send_notification(topic, self.state[topic])

        return list(request.subscriptions)",JsonRpc.subscribe,https://github.com/pengutronix/aiohttp-json-rpc/blob/24ec9ae9ae0633b2deaae7e29f6056f150cb4025/aiohttp_json_rpc/rpc.py#L386-L397,1.1163679
randomly extract x items from a list,"def to_protobuf(self):
        """"""Return a protobuf corresponding to the key.

        :rtype: :class:`.entity_pb2.Key`
        :returns: The protobuf representing the key.
        """"""
        key = _entity_pb2.Key()
        key.partition_id.project_id = self.project

        if self.namespace:
            key.partition_id.namespace_id = self.namespace

        for item in self.path:
            element = key.path.add()
            if ""kind"" in item:
                element.kind = item[""kind""]
            if ""id"" in item:
                element.id = item[""id""]
            if ""name"" in item:
                element.name = item[""name""]

        return key",Key.to_protobuf,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/datastore/google/cloud/datastore/key.py#L280-L301,1.116322
randomly extract x items from a list,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.1153932
convert a date string into yyyymmdd,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0825174
convert a date string into yyyymmdd,"def set_chorus(self, nr=-1, level=-1.0, speed=-1.0, depth=-1.0, type=-1):
        """"""                                  
        nr Chorus voice count (0-99, CPU time consumption proportional to this value)
        level Chorus level (0.0-10.0)
        speed Chorus speed in Hz (0.29-5.0)
        depth_ms Chorus depth (max value depends on synth sample rate, 0.0-21.0 is safe for sample rate values up to 96KHz)
        type Chorus waveform type (0=sine, 1=triangle)
        """"""
        set=0
        if nr>=0:
            set+=0b00001
        if level>=0:
            set+=0b00010
        if speed>=0:
            set+=0b00100
        if depth>=0:
            set+=0b01000
        if type>=0:
            set+=0b10000
        return fluid_synth_set_chorus_full(self.synth, set, nr, level, speed, depth, type)",Synth.set_chorus,https://github.com/nwhitehead/pyfluidsynth/blob/9a8ecee996e83a279e8d29d75e8a859aee4aba67/fluidsynth.py#L537-L556,1.0523924
convert a date string into yyyymmdd,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.0517635
convert a date string into yyyymmdd,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0500407
convert a date string into yyyymmdd,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.0487258
convert a date string into yyyymmdd,"def get_options(self):
        option_list = []
        for option, value in self.options.items():
            if len(option) == 1:
                option_str = '-%s' % option
            elif option.startswith('-'):
                option_str = option[1:]
            else:
                option_str = '--%s' % option

            if value:
                option_str = '%s%s%s' % (option_str, self.param_sep, value)

            option_list.append(option_str)
        return ' '.join(option_list)",MinifyTask.get_options,https://github.com/mathiasertl/fabric-webbuilders/blob/9db2b2fbd95f6b818186b5166f8256c5d4ea0a4e/fabric_webbuilders/base.py#L212-L226,1.047078
convert a date string into yyyymmdd,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0464569
convert a date string into yyyymmdd,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0456077
convert a date string into yyyymmdd,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.0455304
convert a date string into yyyymmdd,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0450244
convert a utc time to epoch,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0566937
convert a utc time to epoch,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0430663
convert a utc time to epoch,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0381596
convert a utc time to epoch,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0378878
convert a utc time to epoch,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0377648
convert a utc time to epoch,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0358051
convert a utc time to epoch,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.0350277
convert a utc time to epoch,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0345414
convert a utc time to epoch,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0340346
convert a utc time to epoch,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0335702
all permutations of a list,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.050188
all permutations of a list,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0399442
all permutations of a list,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0388513
all permutations of a list,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.0387862
all permutations of a list,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.037755
all permutations of a list,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0377021
all permutations of a list,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0374634
all permutations of a list,"def __init__(self, text: str, url: str = None, callback_data: str = None,
                 switch_inline_query: str = None,
                 switch_inline_query_current_chat: str = None,
                 callback_game: 'CallbackGame' = None) -> None:
        data = {
            'text': text,
        }
        if url is not None:
            data['url'] = url
        if callback_data is not None:
            data['callback_data'] = callback_data
        if switch_inline_query is not None:
            data['switch_inline_query'] = switch_inline_query
        if switch_inline_query_current_chat is not None:
            data['switch_inline_query_current_chat'] = switch_inline_query_current_chat
        if callback_game is not None:
            data['callback_game'] = callback_game
        self._data = data",InlineKeyboardButton.__init__,https://github.com/legnaleurc/wcpan.telegram/blob/61a172203ff69b6490e52a64bf55d47aeef1e148/wcpan/telegram/types.py#L697-L714,1.0366832
all permutations of a list,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0364646
all permutations of a list,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.0364634
extract latitude and longitude from given input,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0815841
extract latitude and longitude from given input,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0796791
extract latitude and longitude from given input,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.074525
extract latitude and longitude from given input,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0744169
extract latitude and longitude from given input,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0742061
extract latitude and longitude from given input,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.073377
extract latitude and longitude from given input,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0733554
extract latitude and longitude from given input,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.0722175
extract latitude and longitude from given input,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0711594
extract latitude and longitude from given input,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.0709748
how to check if a checkbox is checked,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0654798
how to check if a checkbox is checked,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0616733
how to check if a checkbox is checked,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0612978
how to check if a checkbox is checked,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0607836
how to check if a checkbox is checked,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.060449
how to check if a checkbox is checked,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.060396
how to check if a checkbox is checked,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0592444
how to check if a checkbox is checked,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0582006
how to check if a checkbox is checked,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0577189
how to check if a checkbox is checked,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.057416
converting uint8 array to image,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.097061
converting uint8 array to image,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0950571
converting uint8 array to image,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0938635
converting uint8 array to image,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0926853
converting uint8 array to image,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0917928
converting uint8 array to image,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.091782
converting uint8 array to image,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0905328
converting uint8 array to image,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0895822
converting uint8 array to image,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.08949
converting uint8 array to image,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0884688
memoize to disk  - persistent memoization,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0558144
memoize to disk  - persistent memoization,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0545386
memoize to disk  - persistent memoization,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.0340334
memoize to disk  - persistent memoization,"def delete_ip_from_host_record(self, host_record, ip):
        host_record.ip.remove(ip)
        return host_record.update()",InfobloxObjectManager.delete_ip_from_host_record,https://github.com/infobloxopen/infoblox-client/blob/edeec62db1935784c728731b2ae7cf0fcc9bf84d/infoblox_client/object_manager.py#L291-L293,1.0336573
memoize to disk  - persistent memoization,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0320442
memoize to disk  - persistent memoization,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0243118
memoize to disk  - persistent memoization,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0238211
memoize to disk  - persistent memoization,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0189422
memoize to disk  - persistent memoization,"def analysis_selector_process(analysis_selector): 
    analysis_selector_module = importlib.import_module(analysis_selector.selector_module)
    return functools.partial( getattr(analysis_selector_module,analysis_selector.selector_function), analysis_selector )",analysis_selector_process,https://github.com/pjanis/funtool/blob/231851238f0a62bc3682d8fa937db9053378c53d/funtool/analysis_selector.py#L23-L25,1.0139949
memoize to disk  - persistent memoization,"def new_display_editor_dialog(self, display_item: DisplayItem.DisplayItem=None):
        if not display_item:
            display_item = self.selected_display_item
        if display_item:
            edit_display_dialog = DisplayEditorPanel.DisplayEditorDialog(self, display_item)
            edit_display_dialog.show()
            self.register_dialog(edit_display_dialog)",DocumentController.new_display_editor_dialog,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L1019-L1025,1.013808
parse command line argument,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.1043637
parse command line argument,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.1035253
parse command line argument,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.1026298
parse command line argument,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.1025239
parse command line argument,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1020529
parse command line argument,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.1019688
parse command line argument,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.1012142
parse command line argument,"def decode_list(data):
    rv = []
    for item in data:
        if isinstance(item, unicode):
            item = item.encode('utf-8')
            if type(item) == type(""""):
                if not item.isdigit():
                    try:
                        item = float(item)
                    except:
                        item = item
        elif isinstance(item, list):
            item = decode_list(item)
        elif isinstance(item, dict):
            item = decode_dict(item)
        rv.append(item)
    return rv",decode_list,https://github.com/pbrisk/unicum/blob/24bfa7355f36847a06646c58e9fd75bd3b689bfe/unicum/decode_json.py#L31-L47,1.1008085
parse command line argument,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.100671
parse command line argument,"def BadResponse(body, request, status_code=None,
                    headers=None):
        """"""
        Construct a Bad HTTP response (defined in DEFAULT_BAD_RESPONSE_CODE)

        :param body: The body of the response
        :type  body: ``str``

        :param request: The HTTP request
        :type  request: :class:`requests.Request`

        :param status_code: The return status code, defaults
            to DEFAULT_GOOD_STATUS_CODE if not specified
        :type  status_code: ``int``

        :param headers: Response headers, defaults to
            DEFAULT_RESPONSE_HEADERS if not specified
        :type  headers: ``dict``

        :rtype: :class:`requests.Response`
        :returns: a Response object
        """"""
        response = Response()
        response.url = request.url
        response.raw = BytesIO(body)
        if status_code:
            response.status_code = status_code
        else:
            response.status_code = DEFAULT_BAD_STATUS_CODE
        if headers:
            response.headers = headers
        else:
            response.headers = DEFAULT_RESPONSE_HEADERS
        response.request = request
        response._content = body
        return response",StaticResponseFactory.BadResponse,https://github.com/tonybaloney/requests-staticmock/blob/431a68acc8e04eec42143bd1de43635cbc94fc3f/requests_staticmock/responses.py#L71-L106,1.1006058
how to read the contents of a .gz compressed file?,"def _create_user_dict(user):
        properties = {}

        if user.firstname:
            properties['firstname'] = user.firstname

        if user.lastname:
            properties['lastname'] = user.lastname

        if user.email:
            properties['email'] = user.email

        if user.password:
            properties['password'] = user.password

        # Optional Properties
        if user.administrator:
            properties['administrator'] = user.administrator

        if user.force_sec_auth:
            properties['forceSecAuth'] = user.force_sec_auth

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_user_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2708-L2734,1.10139
how to read the contents of a .gz compressed file?,"def __repr__(self):
        more = ''
        if self.service:
            more += 'service=%r, ' % self.service
        if self.resource:
            more += 'resource=%r, ' % self.resource
        if self.event:
            more += 'event=%r, ' % self.event
        if self.group:
            more += 'group=%r, ' % self.group
        if self.tags:
            more += 'tags=%r, ' % self.tags
        if self.customer:
            more += 'customer=%r, ' % self.customer

        return 'Blackout(id={!r}, priority={!r}, status={!r}, environment={!r}, {}start_time={!r}, end_time={!r}, remaining={!r})'.format(
            self.id,
            self.priority,
            self.status,
            self.environment,
            more,
            self.start_time,
            self.end_time,
            self.remaining
        )",Blackout.__repr__,https://github.com/alerta/python-alerta-client/blob/7eb367b5fe87d5fc20b54dea8cddd7f09e251afa/alertaclient/models/blackout.py#L63-L87,1.0934871
how to read the contents of a .gz compressed file?,"def _create_group_dict(group):
        properties = {}

        if group.name:
            properties['name'] = group.name

        # Optional Properties
        if group.reserve_ip:
            properties['reserveIp'] = group.reserve_ip

        if group.create_snapshot:
            properties['createSnapshot'] = group.create_snapshot

        if group.create_datacenter:
            properties['createDataCenter'] = \
                group.create_datacenter

        if group.access_activity_log:
            properties['accessActivityLog'] = \
                group.access_activity_log

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_group_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2680-L2705,1.0914311
how to read the contents of a .gz compressed file?,"def xml2text(xml):
    """"""
    A string representing the textual content of this run, with content
    child elements like ``<w:tab/>`` translated to their Python
    equivalent.
    Adapted from: https://github.com/python-openxml/python-docx/
    """"""
    text = u''
    root = ET.fromstring(xml)
    for child in root.iter():
        if child.tag == qn('w:t'):
            t_text = child.text
            text += t_text if t_text is not None else ''
        elif child.tag == qn('w:tab'):
            text += '\t'
        elif child.tag in (qn('w:br'), qn('w:cr')):
            text += '\n'
        elif child.tag == qn(""w:p""):
            text += '\n\n'
    return text",xml2text,https://github.com/ankushshah89/python-docx2txt/blob/67f226c92ec333ad4968d3acf45b3ba3ffc0192b/docx2txt/docx2txt.py#L50-L69,1.082603
how to read the contents of a .gz compressed file?,"def _make_callback(self):
        callback = self.callback
        for plugin in self.all_plugins():
            try:
                if hasattr(plugin, 'apply'):
                    api = getattr(plugin, 'api', 1)
                    context = self if api > 1 else self._context
                    callback = plugin.apply(callback, context)
                else:
                    callback = plugin(callback)
            except RouteReset: # Try again with changed configuration.
                return self._make_callback()
            if not callback is self.callback:
                try_update_wrapper(callback, self.callback)
        return callback",Route._make_callback,https://github.com/yueyoum/social-oauth/blob/80600ea737355b20931c8a0b5223f5b68175d930/example/_bottle.py#L510-L524,1.0804685
how to read the contents of a .gz compressed file?,"def _make_callback(self):
        callback = self.callback
        for plugin in self.all_plugins():
            try:
                if hasattr(plugin, 'apply'):
                    callback = plugin.apply(callback, self)
                else:
                    callback = plugin(callback)
            except RouteReset:  # Try again with changed configuration.
                return self._make_callback()
            if not callback is self.callback:
                update_wrapper(callback, self.callback)
        return callback",Route._make_callback,https://github.com/samghelms/mathviz/blob/30fe89537379faea4de8c8b568ac6e52e4d15353/mathviz_hopper/src/bottle.py#L567-L579,1.0796529
how to read the contents of a .gz compressed file?,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0792913
how to read the contents of a .gz compressed file?,"def _schema_out_obj(obj, out=None):
    out = [] if out == None else out

    for o in six.itervalues(obj.properties):
        out = _schema_out_obj(o, out)

    for o in obj.allOf:
        out = _schema_out_obj(o, out)

    if isinstance(obj.additionalProperties, Schema):
        out = _schema_out_obj(obj.additionalProperties, out)

    if obj.items:
        out = _schema_out_obj(obj.items, out)

    r = getattr(obj, '$ref')
    if r:
        out.append(r)

    return out",_schema_out_obj,https://github.com/pyopenapi/pyswagger/blob/333c4ca08e758cd2194943d9904a3eda3fe43977/pyswagger/scanner/cycle_detector.py#L24-L43,1.0766251
how to read the contents of a .gz compressed file?,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0750192
how to read the contents of a .gz compressed file?,"def to_json(self):
        slot_j = {""name"": self.name}
        if self.create_version:
            slot_j['createVersion'] = self.create_version
        if self.value_selection_strategy:
            slot_j['valueSelectionStrategy'] = self.value_selection_strategy
        if self.description:
            slot_j['description'] = self.description
        if self.enumeration_values:
            slot_j['enumerationValues'] = self.enumeration_values
        if self.checksum:
            slot_j['checksum'] = self.checksum
        if slot_j['slotType'].startswith('AMAZON.') and 'version' in slot_j.keys():
            del slot_j['version']
        return slot_j",Slot.to_json,https://github.com/troylar/luthor-for-lex/blob/3a1f0c72b790fd53fbcd4b4a2723114463728aa2/lex/fluent/slot.py#L65-L79,1.0749091
sending binary data over a serial connection,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.114157
sending binary data over a serial connection,"def selected_display_item(self) -> typing.Optional[DisplayItem.DisplayItem]:
        """"""Return the selected display item.

        The selected display is the display ite that has keyboard focus in the data panel or a display panel.
        """"""
        # first check for the [focused] data browser
        display_item = self.focused_display_item
        if not display_item:
            selected_display_panel = self.selected_display_panel
            display_item = selected_display_panel.display_item if selected_display_panel else None
        return display_item",DocumentController.selected_display_item,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DocumentController.py#L795-L805,1.1009998
sending binary data over a serial connection,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0945683
sending binary data over a serial connection,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0931594
sending binary data over a serial connection,"def copy_display_data_properties_from(self, display_data_channel: ""DisplayDataChannel"") -> None:
        self.complex_display_type = display_data_channel.complex_display_type
        self.display_limits = display_data_channel.display_limits
        self.color_map_id = display_data_channel.color_map_id
        self.sequence_index = display_data_channel.sequence_index
        self.collection_index = display_data_channel.collection_index
        self.slice_center = display_data_channel.slice_center
        self.slice_width = display_data_channel.slice_width",DisplayDataChannel.copy_display_data_properties_from,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/model/DisplayItem.py#L458-L465,1.0914423
sending binary data over a serial connection,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0903312
sending binary data over a serial connection,"def quoted_split(string, sep, quotes='""'):
    """"""
    Split a string on the given separation character, but respecting
    double-quoted sections of the string.  Returns an iterator.

    :param string: The string to split.
    :param sep: The character separating sections of the string.
    :param quotes: A string specifying all legal quote characters.

    :returns: An iterator which will iterate over each element of the
              string separated by the designated separator.
    """"""

    # Initialize the algorithm
    start = None
    escape = False
    quote = False

    # Walk through the string
    for i, c in enumerate(string):
        # Save the start index
        if start is None:
            start = i

        # Handle escape sequences
        if escape:
            escape = False

        # Handle quoted strings
        elif quote:
            if c == '\\':
                escape = True
            elif c == quote:
                quote = False

        # Handle the separator
        elif c == sep:
            yield string[start:i]
            start = None

        # Handle quotes
        elif c in quotes:
            quote = c

    # Yield the last part
    if start is not None:
        yield string[start:]",quoted_split,https://github.com/klmitch/aversion/blob/90ca68e7d6426a77db8a926171f8d3bbeb00ee4c/aversion.py#L29-L75,1.0897543
sending binary data over a serial connection,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.0894047
sending binary data over a serial connection,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0881394
sending binary data over a serial connection,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0876318
extracting data from a text file,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1179267
extracting data from a text file,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.0945252
extracting data from a text file,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.0882494
extracting data from a text file,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0877571
extracting data from a text file,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.0871302
extracting data from a text file,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0866241
extracting data from a text file,"def pw(min_word_length=3, max_word_length=8, max_int_value=1000, number_of_elements=4, no_special_characters=False):
    """"""
        Generate a password
    """"""

    # Set the position of the integer
    int_position = set_int_position(number_of_elements)

    # Load dictionary
    dictionary = load_dictionary()

    password = ''
    for i in range(number_of_elements):
        # Add word or integer
        if i == int_position:
            password += str(get_random_int(max_int_value))
        else:
            password += get_random_word(dictionary,
                                        min_word_length,
                                        max_word_length).title()

        # Add separator
        if i != number_of_elements - 1:
            password += get_random_separator(no_special_characters)

    return password",pw,https://github.com/gabfl/password-generator-py/blob/cd59078fd3e6ea85b7acd9bfcf6d04014c0f7220/src/pwgenerator.py#L71-L96,1.0863197
extracting data from a text file,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.0859947
extracting data from a text file,"def get_options(self):
        option_list = []
        for option, value in self.options.items():
            if len(option) == 1:
                option_str = '-%s' % option
            elif option.startswith('-'):
                option_str = option[1:]
            else:
                option_str = '--%s' % option

            if value:
                option_str = '%s%s%s' % (option_str, self.param_sep, value)

            option_list.append(option_str)
        return ' '.join(option_list)",MinifyTask.get_options,https://github.com/mathiasertl/fabric-webbuilders/blob/9db2b2fbd95f6b818186b5166f8256c5d4ea0a4e/fabric_webbuilders/base.py#L212-L226,1.0839571
extracting data from a text file,"def _handle_app_yaml(args, directory):
    force = args.force
    yaml_file = os.path.join(directory, DEFAULT_APP_YAML)
    _check_file(yaml_file, force)
    contents = ""---\n""
    if args.private_token:
        contents += 'private_token: %s\n' % args.private_token
    if args.mq:
        contents += 'message_queue_url: ""amqp://guest:guest@localhost:5672//""\n'
    if args.auto_conda:
        contents += 'conda_auto_init: true\n'
        contents += 'conda_auto_install: true\n'
    else:
        if not IS_WINDOWS and args.libdrmaa_path:
            contents += 'manager:\n  type: queued_drmaa\n'
    open(yaml_file, ""w"").write(contents)",_handle_app_yaml,https://github.com/galaxyproject/pulsar/blob/9ab6683802884324652da0a9f0808c7eb59d3ab4/pulsar/scripts/config.py#L302-L317,1.083832
positions of substrings in string,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0617791
positions of substrings in string,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0522739
positions of substrings in string,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0502342
positions of substrings in string,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0494541
positions of substrings in string,"def _get_elements_and_parameters(
            self, width, height, x, y, default_format):
        parent = super()._get_elements_and_parameters(
            width, height, x, y, default_format)
        for i, (element, width, height, x, y, default_format) in enumerate(
                parent):
            zebra_format = self._formats[i % 2]
            if zebra_format:
                if default_format:
                    default_format = default_format + zebra_format
                else:
                    default_format = zebra_format
            yield element, width, height, x, y, default_format",Zebra._get_elements_and_parameters,https://github.com/ch3pjw/junction/blob/7d0c4d279589bee8ae7b3ac4dee2ab425c0b1b0e/jcn/container_elements.py#L250-L262,1.0489641
positions of substrings in string,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0487534
positions of substrings in string,"def _sanitize_object(obj):
    result = {}
    for k, v in obj.items():
        if isinstance(v, int) or isinstance(v, Decimal):
            result[k] = v
        elif not (isinstance(v, str) or isinstance(v, unicode)):
            result[k] = json.loads(bleach.clean(json.dumps(v)))
        else:
            result[k] = bleach.clean(v)
        if result[k] == '':
            result[k] = None
        # Making an assumption that there is no good usecase
        # for setting an empty string. This will help prevent
        # cases where empty string is sent because of client
        # not clearing form fields to null
    return result",_sanitize_object,https://github.com/SuryaSankar/flask-sqlalchemy-booster/blob/444048d167ab7718f758e943665ef32d101423a5/flask_sqlalchemy_booster/core.py#L65-L80,1.0486315
positions of substrings in string,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.04862
positions of substrings in string,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0481029
positions of substrings in string,"def _replace_pressure(arguments, dtype_in_vert):
    """"""Replace p and dp Vars with appropriate Var objects specific to
    the dtype_in_vert.""""""
    arguments_out = []
    for arg in arguments:
        if isinstance(arg, Var):
            if arg.name == 'p':
                arguments_out.append(_P_VARS[dtype_in_vert])
            elif arg.name == 'dp':
                arguments_out.append(_DP_VARS[dtype_in_vert])
            else:
                arguments_out.append(arg)
        else:
            arguments_out.append(arg)
    return arguments_out",_replace_pressure,https://github.com/spencerahill/aospy/blob/2f6e775b9b9956c54af117fdcdce2c87196afb6c/aospy/calc.py#L28-L42,1.0464419
reading element from html - <td>,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.2130592
reading element from html - <td>,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.2061841
reading element from html - <td>,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.2060993
reading element from html - <td>,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.2054017
reading element from html - <td>,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.204532
reading element from html - <td>,"def _determine_resource_pool(session, vm_):
    '''
    Called by create() used to determine resource pool
    '''
    resource_pool = ''
    if 'resource_pool' in vm_.keys():
        resource_pool = _get_pool(vm_['resource_pool'], session)
    else:
        pool = session.xenapi.pool.get_all()
        if not pool:
            resource_pool = None
        else:
            first_pool = session.xenapi.pool.get_all()[0]
            resource_pool = first_pool
    pool_record = session.xenapi.pool.get_record(resource_pool)
    log.debug('resource pool: %s', pool_record['name_label'])
    return resource_pool",_determine_resource_pool,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/cloud/clouds/xen.py#L514-L530,1.2043937
reading element from html - <td>,"def escape_LDAP(ldap_string):
    # type: (str) -> str
    # pylint: disable=C0103
    """"""
    Escape a string to let it go in an LDAP filter

    :param ldap_string: The string to escape
    :return: The protected string
    """"""
    if not ldap_string:
        # No content
        return ldap_string

    # Protect escape character previously in the string
    assert is_string(ldap_string)
    ldap_string = ldap_string.replace(
        ESCAPE_CHARACTER, ESCAPE_CHARACTER + ESCAPE_CHARACTER
    )

    # Leading space
    if ldap_string.startswith("" ""):
        ldap_string = ""\\ {0}"".format(ldap_string[1:])

    # Trailing space
    if ldap_string.endswith("" ""):
        ldap_string = ""{0}\\ "".format(ldap_string[:-1])

    # Escape other characters
    for escaped in ESCAPED_CHARACTERS:
        ldap_string = ldap_string.replace(escaped, ESCAPE_CHARACTER + escaped)

    return ldap_string",escape_LDAP,https://github.com/tcalmant/ipopo/blob/2f9ae0c44cd9c34ef1a9d50837b3254e75678eb1/pelix/ldapfilter.py#L308-L339,1.2029628
reading element from html - <td>,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.2027966
reading element from html - <td>,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.2025616
reading element from html - <td>,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.2018511
deducting the median from each column,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.11158
deducting the median from each column,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.1097565
deducting the median from each column,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.1071355
deducting the median from each column,"def add_resource_scenario(self, resource_attr, dataset=None, source=None):
        rs_i = ResourceScenario()
        if resource_attr.id is None:
            rs_i.resourceattr = resource_attr
        else:
            rs_i.resource_attr_id = resource_attr.id

        if dataset.id is None:
            rs_i.dataset = dataset
        else:
            rs_i.dataset_id = dataset.id
        rs_i.source = source
        self.resourcescenarios.append(rs_i)",Scenario.add_resource_scenario,https://github.com/hydraplatform/hydra-base/blob/9251ff7946505f7a272c87837390acd1c435bc6e/hydra_base/db/model.py#L1372-L1384,1.1068617
deducting the median from each column,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.1058648
deducting the median from each column,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.1055726
deducting the median from each column,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.104081
deducting the median from each column,"def serialize(self):
        data = {}
        if self.condition_type:
            data['type'] = self.condition_type
        if self.status:
            data['status'] = self.status
        if self.last_heartbeat_time:
            data['lastHeartbeatTime'] = self.last_heartbeat_time
        if self.last_transition_time:
            data['lastTransitionTime'] = self.last_transition_time
        if self.reason:
            data['reason'] = self.reason
        if self.message:
            data['message'] = self.message
        return data",NodeCondition.serialize,https://github.com/mnubo/kubernetes-py/blob/e417946837f7cb06b6ea9f7c20d8c19853fbd1bf/kubernetes_py/models/v1/NodeCondition.py#L118-L132,1.1040441
deducting the median from each column,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.1034086
deducting the median from each column,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.1010749
concatenate several file remove header lines,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0349106
concatenate several file remove header lines,"def __set_display_panel_controller(self, display_panel_controller):
        if self.__display_panel_controller:
            self.__display_panel_controller.close()
            self.__display_panel_controller = None
        self.__display_panel_controller = display_panel_controller
        if not display_panel_controller:
            self.header_canvas_item.reset_header_colors()
        if self.__display_panel_controller:
            self.set_display_item(self.__display_item)",DisplayPanel.__set_display_panel_controller,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/DisplayPanel.py#L1302-L1310,1.0336903
concatenate several file remove header lines,"def _connect_with_conf(conn_conf):
    conf = conn_conf
    if isinstance(conn_conf, dict):
        conf = H2OConnectionConf(config=conn_conf)
    assert_is_type(conf, H2OConnectionConf)

    return connect(url = conf.url, verify_ssl_certificates = conf.verify_ssl_certificates,
                   auth = conf.auth, proxy = conf.proxy,cookies = conf.cookies, verbose = conf.verbose)",_connect_with_conf,https://github.com/h2oai/h2o-3/blob/dd62aaa1e7f680a8b16ee14bc66b0fb5195c2ad8/h2o-py/h2o/h2o.py#L1542-L1549,1.03237
concatenate several file remove header lines,"def apply_query_operators(iterable, ops):
    '''
    Apply a series of query operators to a sequence of instances, e.g.
    where_eq(), order_by() or filter functions.
    '''
    for op in ops:
        if isinstance(op, WhereEqual):
            iterable = op(iterable)
            
        elif isinstance(op, OrderBy):
            iterable = op(iterable)
            
        elif isinstance(op, dict):
            iterable = WhereEqual(op)(iterable)
            
        else:
            iterable = filter(op, iterable)

    return iterable",apply_query_operators,https://github.com/xtuml/pyxtuml/blob/7dd9343b9a0191d1db1887ab9288d0a026608d9a/xtuml/meta.py#L136-L154,1.0319347
concatenate several file remove header lines,"def update_config_with_args(conf, args):
    conf['verbose'] = True
    if args.verbose >= 1 and args.quiet < 1:
        conf['debug'] = True
    if args.to:
        conf['to'] = args.to
    if args.sender:
        conf['from'] = args.sender
    if args.username:
        conf['username'] = args.username
    if args.password:
        conf['password'] = args.password
    return conf",update_config_with_args,https://github.com/46elks/elkme/blob/6ebdce6f8ac852fc6f714d1f1b836f2777fece4e/elkme/config.py#L163-L175,1.0315794
concatenate several file remove header lines,"def _set_network_adapter_mapping(domain, gateway, ip_addr, subnet_mask, mac):
    '''
    Returns a vim.vm.customization.AdapterMapping object containing the IP
    properties of a network adapter card

    domain
        Domain of the host

    gateway
        Gateway address

    ip_addr
        IP address

    subnet_mask
        Subnet mask

    mac
        MAC address of the guest
    '''
    adapter_mapping = vim.vm.customization.AdapterMapping()
    adapter_mapping.macAddress = mac
    adapter_mapping.adapter = vim.vm.customization.IPSettings()
    if domain:
        adapter_mapping.adapter.dnsDomain = domain
    if gateway:
        adapter_mapping.adapter.gateway = gateway
    if ip_addr:
        adapter_mapping.adapter.ip = \
            vim.vm.customization.FixedIp(ipAddress=ip_addr)
        adapter_mapping.adapter.subnetMask = subnet_mask
    else:
        adapter_mapping.adapter.ip = vim.vm.customization.DhcpIpGenerator()
    return adapter_mapping",_set_network_adapter_mapping,https://github.com/saltstack/salt/blob/e8541fd6e744ab0df786c0f76102e41631f45d46/salt/modules/vsphere.py#L8091-L8124,1.0304633
concatenate several file remove header lines,"def __repr__(self):
        more = ''
        if self.service:
            more += 'service=%r, ' % self.service
        if self.resource:
            more += 'resource=%r, ' % self.resource
        if self.event:
            more += 'event=%r, ' % self.event
        if self.group:
            more += 'group=%r, ' % self.group
        if self.tags:
            more += 'tags=%r, ' % self.tags
        if self.customer:
            more += 'customer=%r, ' % self.customer

        return 'Blackout(id={!r}, priority={!r}, status={!r}, environment={!r}, {}start_time={!r}, end_time={!r}, remaining={!r})'.format(
            self.id,
            self.priority,
            self.status,
            self.environment,
            more,
            self.start_time,
            self.end_time,
            self.remaining
        )",Blackout.__repr__,https://github.com/alerta/python-alerta-client/blob/7eb367b5fe87d5fc20b54dea8cddd7f09e251afa/alertaclient/models/blackout.py#L63-L87,1.0300678
concatenate several file remove header lines,"def tselec(flags):

    for i in range(24):
        if(i != 9):
            if(flags.switches[i]==1):
                flags.sw[i]=1
            else:
                flags.sw[i]=0

            if(flags.switches[i]>0):
                flags.swc[i]=1
            else:
                flags.swc[i]=0
        else:
            flags.sw[i]=flags.switches[i]
            flags.swc[i]=flags.switches[i]
    return",tselec,https://github.com/CalebBell/fluids/blob/57f556752e039f1d3e5a822f408c184783db2828/fluids/nrlmsise00/nrlmsise_00.py#L104-L120,1.0284624
concatenate several file remove header lines,"def _make_styles(self):
        for ttype, ndef in self.style:
            start = end = ''
            if ndef['color']:
                start += '[color=#%s]' % ndef['color']
                end = '[/color]' + end
            if ndef['bold']:
                start += '[b]'
                end = '[/b]' + end
            if ndef['italic']:
                start += '[i]'
                end = '[/i]' + end
            if ndef['underline']:
                start += '[u]'
                end = '[/u]' + end
            # there are no common BBcodes for background-color and border

            self.styles[ttype] = start, end",BBCodeFormatter._make_styles,https://github.com/wakatime/wakatime/blob/74519ace04e8472f3a3993269963732b9946a01d/wakatime/packages/pygments/formatters/bbcode.py#L60-L77,1.0282451
concatenate several file remove header lines,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.0280962
parse query string in url,"def clear_display(self):
        display = self.display
        # Erase all just HiDES them
        display.Context.PurgeDisplay()
        display.Context.RemoveAll()",QtOccViewer.clear_display,https://github.com/frmdstryr/enamlx/blob/9582e29c88dc0c0340f912b49168b7307a47ed4f/enamlx/qt/qt_occ_viewer.py#L580-L584,1.0960466
parse query string in url,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.0931224
parse query string in url,"def update_display_properties(self, display_properties: typing.Mapping, display_layers: typing.Sequence[typing.Mapping]) -> None: ...",ImageCanvasItemDelegate.update_display_properties,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/ImageCanvasItem.py#L271-L271,1.0883801
parse query string in url,"def display_xdata(self) -> DataAndMetadata.DataAndMetadata:
        """"""Return the extended data of this data item display.

        Display data will always be 1d or 2d and either int, float, or RGB data type.

        .. versionadded:: 1.0

        Scriptable: Yes
        """"""
        display_data_channel = self.__display_item.display_data_channel
        return display_data_channel.get_calculated_display_values(True).display_data_and_metadata",DataItem.display_xdata,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Facade.py#L1037-L1047,1.0831939
parse query string in url,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.0701528
parse query string in url,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0699685
parse query string in url,"def decode_string(s):
    """"""
    :type s: str
    :rtype: str
    """"""
    stack = []; cur_num = 0; cur_string = ''
    for c in s:
        if c == '[':
            stack.append((cur_string, cur_num))
            cur_string = ''
            cur_num = 0
        elif c == ']':
            prev_string, num = stack.pop()
            cur_string = prev_string + num * cur_string
        elif c.isdigit():
            cur_num = cur_num*10 + int(c)
        else:
            cur_string += c
    return cur_string",decode_string,https://github.com/keon/algorithms/blob/4d6569464a62a75c1357acc97e2dd32ee2f9f4a3/algorithms/strings/decode_string.py#L20-L38,1.0698066
parse query string in url,"def _clone(self):
        klass = self.__class__
        c = klass(self.model_class)
        if self._filters:
            c._filters = self._filters
        if self._exclusions:
            c._exclusions = self._exclusions
        if self._zfilters:
            c._zfilters = self._zfilters
        if self._ordering:
            c._ordering = self._ordering
        c._limit = self._limit
        c._offset = self._offset
        return c",ModelSet._clone,https://github.com/iamteem/redisco/blob/a7ba19ff3c38061d6d8bc0c10fa754baadcfeb91/redisco/models/modelset.py#L286-L299,1.0697093
parse query string in url,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.0696584
parse query string in url,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0693424
fuzzy match ranking,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.0406576
fuzzy match ranking,"def get_mongo_query_from_arguments(self, reserved_attributes=[]):
        """"""Generate a mongo query from the given URL query parameters, handles OR query via multiples

        :param list reserved_attributes: A list of attributes you want to exclude from this particular query
        :return: dict
        """"""

        query = {}
        for arg in self.request.arguments:
            if arg not in reserved_attributes:
                if len(self.request.arguments.get(arg)) > 1:
                    query[""$or""] = []
                    for val in self.request.arguments.get(arg):
                        query[""$or""].append({arg: self.get_arg_value_as_type(val)})
                else:
                    query[arg] = self.get_arg_value_as_type(self.request.arguments.get(arg)[0])

        return query",BaseHandler.get_mongo_query_from_arguments,https://github.com/urbn/Caesium/blob/2a14fe79724c38fe9a1b20f7b8f518f8c6d50df1/caesium/handler.py#L108-L125,1.0398252
fuzzy match ranking,"def _as_mapping(iterable):
        if isinstance(iterable, BaseMultiset):
            return iterable._elements
        if isinstance(iterable, dict):
            return iterable
        if isinstance(iterable, _all_basic_types):
            pass  # create dictionary below
        elif isinstance(iterable, Mapping):
            return iterable
        elif not isinstance(iterable, Iterable):
            raise TypeError(""'%s' object is not iterable"" % type(iterable))
        mapping = dict()
        for element in iterable:
            if element in mapping:
                mapping[element] += 1
            else:
                mapping[element] = 1
        return mapping",BaseMultiset._as_mapping,https://github.com/wheerd/multiset/blob/1f002397096edae3da32d004e3159345a476999c/multiset.py#L635-L652,1.0396744
fuzzy match ranking,"def to_dict_str(origin_value, encode=None):
    """"""recursively convert dict content into string
    """"""
    value = copy.deepcopy(origin_value)
    for k, v in value.items():
        if isinstance(v, dict):
            value[k] = to_dict_str(v, encode)
            continue

        if isinstance(v, list):
            value[k] = to_list_str(v, encode)
            continue

        if encode:
            value[k] = encode(v)
        else:
            value[k] = default_encode(v)

    return value",to_dict_str,https://github.com/wecatch/app-turbo/blob/75faf97371a9a138c53f92168d0a486636cb8a9c/turbo/util.py#L53-L71,1.0375607
fuzzy match ranking,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0368198
fuzzy match ranking,"def process_operation(self, root, state) -> List[Dict]:
        op = {""tag"": ""op""}
        for node in root:
            if node.tag == ""operand"":
                if ""left"" in op:
                    op[""right""] = self.parseTree(node, state)
                else:
                    op[""left""] = self.parseTree(node, state)
            elif node.tag == ""operator"":
                if ""operator"" in op:
                    newOp = {
                        ""tag"": ""op"",
                        ""operator"": node.attrib[""operator""],
                        ""left"": [op],
                    }
                    op = newOp
                else:
                    op[""operator""] = node.attrib[""operator""]
        return [op]",XMLToJSONTranslator.process_operation,https://github.com/ml4ai/delphi/blob/6d03d8aafeab99610387c51b89c99738ff2abbe3/delphi/translators/for2py/translate.py#L447-L465,1.0360544
fuzzy match ranking,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0355469
fuzzy match ranking,"async def subscribe(self, request):
        if type(request.params) is not list:
            request.params = [request.params]

        for topic in request.params:
            if topic and topic in request.topics:
                request.subscriptions.add(topic)

                if topic in self.state:
                    await request.send_notification(topic, self.state[topic])

        return list(request.subscriptions)",JsonRpc.subscribe,https://github.com/pengutronix/aiohttp-json-rpc/blob/24ec9ae9ae0633b2deaae7e29f6056f150cb4025/aiohttp_json_rpc/rpc.py#L386-L397,1.0353515
fuzzy match ranking,"def _get_elements_and_parameters(
            self, width, height, x, y, default_format):
        parent = super()._get_elements_and_parameters(
            width, height, x, y, default_format)
        for i, (element, width, height, x, y, default_format) in enumerate(
                parent):
            zebra_format = self._formats[i % 2]
            if zebra_format:
                if default_format:
                    default_format = default_format + zebra_format
                else:
                    default_format = zebra_format
            yield element, width, height, x, y, default_format",Zebra._get_elements_and_parameters,https://github.com/ch3pjw/junction/blob/7d0c4d279589bee8ae7b3ac4dee2ab425c0b1b0e/jcn/container_elements.py#L250-L262,1.0353233
fuzzy match ranking,"def DefaultSelector():
    """""" This function serves as a first call for DefaultSelector to
    detect if the select module is being monkey-patched incorrectly
    by eventlet, greenlet, and preserve proper behavior. """"""
    global _DEFAULT_SELECTOR
    if _DEFAULT_SELECTOR is None:
        if platform.python_implementation() == 'Jython':  # Platform-specific: Jython
            _DEFAULT_SELECTOR = JythonSelectSelector
        elif _can_allocate('kqueue'):
            _DEFAULT_SELECTOR = KqueueSelector
        elif _can_allocate('devpoll'):
            _DEFAULT_SELECTOR = DevpollSelector
        elif _can_allocate('epoll'):
            _DEFAULT_SELECTOR = EpollSelector
        elif _can_allocate('poll'):
            _DEFAULT_SELECTOR = PollSelector
        elif hasattr(select, 'select'):
            _DEFAULT_SELECTOR = SelectSelector
        else:  # Platform-specific: AppEngine
            raise RuntimeError('Platform does not have a selector.')
    return _DEFAULT_SELECTOR()",DefaultSelector,https://github.com/sethmlarson/selectors2/blob/9bdf3d86578d1a84738cac6eb4127281b75bd669/selectors2.py#L727-L747,1.0351169
output to html file,"def serialize(self):
        sql = 'SELECT '
        sql += ', '.join(self._what)
        if self.sets:
            sql += ' {}'.format(self._from)
        if self.where:
            sql += ' {}'.format(self._where)
        if self.group:
            sql += ' {}'.format(self._group)
        if self.order:
            sql += ' {}'.format(self._order)
        if self.limit:
            sql += ' {}'.format(self._limit)
        return sql + ';'",Select.serialize,https://github.com/Othernet-Project/sqlize-pg/blob/d2f8425e3ea96c510409f3875e14e7fca941693f/sqlize_pg/builder.py#L322-L335,1.0832671
output to html file,"def _to_dict(self):
        """"""Return keyrange's state as a dict.

        :rtype: dict
        :returns: state of this instance.
        """"""
        mapping = {}

        if self.start_open:
            mapping[""start_open""] = self.start_open

        if self.start_closed:
            mapping[""start_closed""] = self.start_closed

        if self.end_open:
            mapping[""end_open""] = self.end_open

        if self.end_closed:
            mapping[""end_closed""] = self.end_closed

        return mapping",KeyRange._to_dict,https://github.com/googleapis/google-cloud-python/blob/85e80125a59cb10f8cb105f25ecc099e4b940b50/spanner/google/cloud/spanner_v1/keyset.py#L90-L110,1.0798193
output to html file,"def summarize(self,items):

        stats = {
            'average_global_note' : 0,
            'n_warnings' : 0,
            'n_errors' : 0,
        }
        cnt = 0
        for item in [item['stats'] for item in items if 'stats' in item]:
            if 'global_note' in item:
                cnt+=1
                stats['average_global_note']+=item['global_note']
            if 'n_warnings' in item:
                stats['n_warnings']+=item['n_warnings']
            if 'n_errors' in item:
                stats['n_errors']+=item['n_errors']

        if cnt > 0:
            stats['average_global_note']/=float(cnt)
        else:
            del stats['average_global_note']

        return stats",PyLintAnalyzer.summarize,https://github.com/quantifiedcode/checkmate/blob/1a4d010c8ef25c678d8d14dc8e37a9bed1883ca2/checkmate/contrib/plugins/python/pylint/analyzer.py#L27-L49,1.078844
output to html file,"def get_query_string_response(self, viz_obj):
        query = None
        try:
            query_obj = viz_obj.query_obj()
            if query_obj:
                query = viz_obj.datasource.get_query_str(query_obj)
        except Exception as e:
            logging.exception(e)
            return json_error_response(e)

        if query_obj and query_obj['prequeries']:
            query_obj['prequeries'].append(query)
            query = ';\n\n'.join(query_obj['prequeries'])
        if query:
            query += ';'
        else:
            query = 'No query.'

        return self.json_response({
            'query': query,
            'language': viz_obj.datasource.query_language,
        })",Superset.get_query_string_response,https://github.com/apache/incubator-superset/blob/ca2996c78f679260eb79c6008e276733df5fb653/superset/views/core.py#L1136-L1157,1.0785128
output to html file,"def _get_resource_pool(self, datacenter_name, clone_params):

        resource_full_path = '{0}/{1}/{2}'.format(datacenter_name,
                                                  clone_params.cluster_name,
                                                  clone_params.resource_pool)
        obj = self.get_folder(clone_params.si, resource_full_path)

        resource_pool = None
        host = None
        if isinstance(obj, self.vim.HostSystem):
            host = obj
            resource_pool = obj.parent.resourcePool

        elif isinstance(obj, self.vim.ResourcePool):
            resource_pool = obj

        elif isinstance(obj, self.vim.ClusterComputeResource):
            resource_pool = obj.resourcePool

        return resource_pool, host",pyVmomiService._get_resource_pool,https://github.com/QualiSystems/vCenterShell/blob/e2e24cd938a92a68f4a8e6a860810d3ef72aae6d/package/cloudshell/cp/vcenter/common/vcenter/vmomi_service.py#L540-L559,1.0784701
output to html file,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'UPDATE %s' % self._class
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '
        
        if self.data:
            sql += 'MERGE ' + json.dumps(self.data)
            if prettify:
                sql += '\n'
            else:
                sql += ' '

        if self.where_criteria.size() > 0:
            sql +=  'WHERE '
            sql +=  self.where_criteria.result()
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        return sql",Update.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L410-L438,1.0774372
output to html file,"def _add_where_to_query(self, query):
        for where in self._where:
            query = query.where(where)
        for e_c in self._extras_conditions:
            query = query.where(e_c)
        return query",QueryBuilder._add_where_to_query,https://github.com/redhat-cip/dci-control-server/blob/b416cf935ec93e4fdd5741f61a21cabecf8454d2/dci/api/v1/utils.py#L307-L312,1.0773782
output to html file,"def date_tuple(ovls):
    """"""
    We should have a list of overlays from which to extract day month
    year.
    """"""

    day = month = year = 0
    for o in ovls:
        if 'day' in o.props:
            day = o.value

        if 'month' in o.props:
            month = o.value

        if 'year' in o.props:
            year = o.value

        if 'date' in o.props:
            day, month, year = [(o or n) for o, n in zip((day, month,
                                                          year), o.value)]

    return (day, month, year)",date_tuple,https://github.com/fakedrake/overlay_parse/blob/9ac362d6aef1ea41aff7375af088c6ebef93d0cd/overlay_parse/dates.py#L57-L78,1.077309
output to html file,"def result(self, *args, **kwargs):
        """"""
        Construye la consulta SQL
        """"""
        prettify = kwargs.get('pretty', False)

        sql = 'CREATE %s %s' % (self._type, self._class)
        
        if prettify:
            sql += '\n'
        else:
            sql += ' '

        if self._type.lower() == 'edge':
            sql += "" FROM %s TO %s "" % (self._from, self._to)
        
        if self._cluster:
            sql += 'CLUSTER %s' % self._cluster
            if prettify:
                sql += '\n'
            else:
                sql += ' '
        
        if self.data:
            sql += 'CONTENT ' + json.dumps(self.data)
        return sql",Create.result,https://github.com/josegomezr/pqb/blob/a600cc6e4e9acdaaf2cff171d13eb85c9ed1757c/pqb/queries.py#L313-L338,1.0762017
output to html file,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.0759617
how to read .csv file in an efficient way?,"def translate_job_state(code):
    '''AUX Function to translate the (numeric) state of a Job.

    Args:
        nr (int): A valid number to translate.

    Returns:
        HTTP response. JSON body.
    '''
    code_description = """"
    if code == ""0"":
        code_description = ""Queued""
    if code == ""1"":
        code_description = ""Scheduled""
    if code == ""2"":
        code_description = ""Processing""
    if code == ""3"":
        code_description = ""Finished""
    if code == ""4"":
        code_description = ""Error""
    if code == ""5"":
        code_description = ""Canceled""
    if code == ""6"":
        code_description = ""Canceling""

    return code_description",translate_job_state,https://github.com/gbowerman/azurerm/blob/79d40431d3b13f8a36aadbff5029888383d72674/azurerm/amsrp.py#L915-L940,1.1564188
how to read .csv file in an efficient way?,"def get_options(self):
        option_list = []
        for option, value in self.options.items():
            if len(option) == 1:
                option_str = '-%s' % option
            elif option.startswith('-'):
                option_str = option[1:]
            else:
                option_str = '--%s' % option

            if value:
                option_str = '%s%s%s' % (option_str, self.param_sep, value)

            option_list.append(option_str)
        return ' '.join(option_list)",MinifyTask.get_options,https://github.com/mathiasertl/fabric-webbuilders/blob/9db2b2fbd95f6b818186b5166f8256c5d4ea0a4e/fabric_webbuilders/base.py#L212-L226,1.1270887
how to read .csv file in an efficient way?,"def _create_user_dict(user):
        properties = {}

        if user.firstname:
            properties['firstname'] = user.firstname

        if user.lastname:
            properties['lastname'] = user.lastname

        if user.email:
            properties['email'] = user.email

        if user.password:
            properties['password'] = user.password

        # Optional Properties
        if user.administrator:
            properties['administrator'] = user.administrator

        if user.force_sec_auth:
            properties['forceSecAuth'] = user.force_sec_auth

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_user_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2708-L2734,1.1256002
how to read .csv file in an efficient way?,"def process_ifs(lines, onnx_ml):  # type: (Iterable[Text], bool) -> Iterable[Text]
    in_if = 0
    for line in lines:
        if IF_ONNX_ML_REGEX.match(line):
            assert 0 == in_if
            in_if = 1
        elif ELSE_ONNX_ML_REGEX.match(line):
            assert 1 == in_if
            in_if = 2
        elif ENDIF_ONNX_ML_REGEX.match(line):
            assert (1 == in_if or 2 == in_if)
            in_if = 0
        else:
            if 0 == in_if:
                yield line
            elif (1 == in_if and onnx_ml):
                yield line
            elif (2 == in_if and not onnx_ml):
                yield line",process_ifs,https://github.com/onnx/onnx/blob/2f7dc10f03a072526d94b6820cedbf2a1ec5a2c4/onnx/gen_proto.py#L40-L58,1.1254045
how to read .csv file in an efficient way?,"def set_chorus(self, nr=-1, level=-1.0, speed=-1.0, depth=-1.0, type=-1):
        """"""                                  
        nr Chorus voice count (0-99, CPU time consumption proportional to this value)
        level Chorus level (0.0-10.0)
        speed Chorus speed in Hz (0.29-5.0)
        depth_ms Chorus depth (max value depends on synth sample rate, 0.0-21.0 is safe for sample rate values up to 96KHz)
        type Chorus waveform type (0=sine, 1=triangle)
        """"""
        set=0
        if nr>=0:
            set+=0b00001
        if level>=0:
            set+=0b00010
        if speed>=0:
            set+=0b00100
        if depth>=0:
            set+=0b01000
        if type>=0:
            set+=0b10000
        return fluid_synth_set_chorus_full(self.synth, set, nr, level, speed, depth, type)",Synth.set_chorus,https://github.com/nwhitehead/pyfluidsynth/blob/9a8ecee996e83a279e8d29d75e8a859aee4aba67/fluidsynth.py#L537-L556,1.1220158
how to read .csv file in an efficient way?,"def _create_group_dict(group):
        properties = {}

        if group.name:
            properties['name'] = group.name

        # Optional Properties
        if group.reserve_ip:
            properties['reserveIp'] = group.reserve_ip

        if group.create_snapshot:
            properties['createSnapshot'] = group.create_snapshot

        if group.create_datacenter:
            properties['createDataCenter'] = \
                group.create_datacenter

        if group.access_activity_log:
            properties['accessActivityLog'] = \
                group.access_activity_log

        raw = {
            ""properties"": properties
        }

        return raw",ProfitBricksService._create_group_dict,https://github.com/profitbricks/profitbricks-sdk-python/blob/2c804b141688eccb07d6ae56601d5c60a62abebd/profitbricks/client.py#L2680-L2705,1.1216946
how to read .csv file in an efficient way?,"def create_password(length, numbers, letters, symbols, uppercase):
    password = """"
    while len(password) < length:
        if numbers and len(password) < length:
            password += choice(digits)
        if letters and len(password) < length:
            password += choice(ascii_lowercase)
        if symbols and len(password) < length:
            password += choice(punctuation)
        if uppercase and len(password) < length:
            password += choice(ascii_uppercase)
    return ''.join(sample(password, len(password)))",create_password,https://github.com/captainsafia/pywd/blob/a6a811481e5920e5f5c1f5ee3c9de15daec90d47/pywd/pywd.py#L34-L45,1.118012
how to read .csv file in an efficient way?,"def display_display_item_in_display_panel(self, display_item, display_panel_id):
        for display_panel in self.display_panels:
            if display_panel.display_panel_id == display_panel_id:
                display_panel.set_display_panel_display_item(display_item)
                self.__sync_layout()",Workspace.display_display_item_in_display_panel,https://github.com/nion-software/nionswift/blob/d43693eaf057b8683b9638e575000f055fede452/nion/swift/Workspace.py#L177-L181,1.1148453
how to read .csv file in an efficient way?,"def xml2text(xml):
    """"""
    A string representing the textual content of this run, with content
    child elements like ``<w:tab/>`` translated to their Python
    equivalent.
    Adapted from: https://github.com/python-openxml/python-docx/
    """"""
    text = u''
    root = ET.fromstring(xml)
    for child in root.iter():
        if child.tag == qn('w:t'):
            t_text = child.text
            text += t_text if t_text is not None else ''
        elif child.tag == qn('w:tab'):
            text += '\t'
        elif child.tag in (qn('w:br'), qn('w:cr')):
            text += '\n'
        elif child.tag == qn(""w:p""):
            text += '\n\n'
    return text",xml2text,https://github.com/ankushshah89/python-docx2txt/blob/67f226c92ec333ad4968d3acf45b3ba3ffc0192b/docx2txt/docx2txt.py#L50-L69,1.113835
how to read .csv file in an efficient way?,"def iter_long(self, string):
		""""""
		Generator performs a modified Aho-Corasick search string algorithm,
		which maches only the longest word.

		""""""
		state = self.root
		last  = None

		index = 0
		while index < len(string):
			c = string[index]

			if c in state.children:
				state = state.children[c]

				if state.output is not nil:
					# save the last node on the path
					last = (state.output, index)

				index += 1
			else:
				if last:
					# return the saved match
					yield last

					# and start over, as we don't want overlapped results
					# Note: this leads to quadratic complexity in the worst case
					index = last[1] + 1
					state = self.root
					last  = None
				else:
					# if no output, perform classic Aho-Corasick algorithm
					while c not in state.children:
						state = state.fail

		# corner case
		if last:
			yield last",Trie.iter_long,https://github.com/WojciechMula/pyahocorasick/blob/53842f783fbe3fa77d53cde1ac251b23c3cbed02/py/pyahocorasick.py#L254-L292,1.1137738
